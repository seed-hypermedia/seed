syntax = "proto3";

package accounts.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "pay/genproto/accounts/v1;pricesv1";

// ProdPricesucts service provides functionality to create and manage account products.
service Prices {
  // Creates a product for the connected account. Thi product represents a 
  // service that the user can offer to their customers.
  rpc CreatePrice(CreatePriceRequest) returns (Price);

  // Updates an existing product for the connected account.
  rpc UpdatePrice(UpdatePriceRequest) returns (Price);

  // Deletes a price for the connected account.
  // One can delete a price only if it is not associated with any product.
  rpc DeletePrice(DeletePriceRequest) returns (google.protobuf.Empty);

  // List all products for the connected account.
  rpc ListPrices(ListPricesRequest) returns (ListPricessResponse);
}

// The Create price Request used to create a new price for an account
// to be monetized. The user must provide proof of ownership of the account
// uid by signing a message with the private key associated with the account uid
// and attaching the signature to the request as a `signature` field in the request header.
message CreatePriceRequest {
  // Required. The id of the account the new price will belong to.
  string uid = 1;

  // Required. The price description.
  string description = 2;

  // The type of the price. The type of the price will determine how the price is charged to the customers.
  PriceType type = 3;

  // The price information that will be used to charge the customers. A price can have multiple
  // price information localized for different currencies or different amounts.
  // For example, a price can have a fixed price in USD and a fixed price in EUR.
  // The price information will be used to charge the customers based on their location or
  // the currency they choose to pay with. If the price is an open price, the amount will be 0
  // but the currency will still be set. If there is only one price information, and the customer
  // wants to pay in a different currency, the platform will convert the amount to the
  // customer's currency using the current exchange rate. If the price has multiple pricing information,
  // the platform will use the first one that matches the customer's currency. 
  repeated price_info info = 4;
}

// The Update price Request used to update a price for an account
// to be monetized. The user must provide proof of ownership of the account
// uid by signing a message with the private key associated with the account uid
// and attaching the signature to the request as a `signature` field in the request header.
message UpdatePriceRequest {
  // Required. The id of the account the price belongs to.
  string uid = 1;

  // Required. The id of the price to be updated.
  string id = 2;

  // Required. The price description.
  string description = 3;

  // The type of the price. The type of the price will determine how the price is charged to the customers.
  PriceType type = 4;

  // The price information that will be used to charge the customers. It the user wants
  // to update the price information, they can do so by providing a new list of price information, even
  // if only one item inside the list has changed from previous updates, the user must provide the entire 
  // list to be used. 
  repeated price_info info = 5;
}

// The Delete price Request used to delete a price for an account.
// The user must provide proof of ownership of the account
// uid by signing a message with the private key associated with the account uid
// and attaching the signature to the request as a `signature` field in the request header.
// A price can be deleted only if it is not associated with any product.
message DeletePriceRequest {
  // Required. The id of the account the price belongs to.
  string uid = 1;
  // Required. The id of the price to be deleted.
  string id = 2;
}

// The List prices Request used to list all prices for an account
// The user must provide proof of ownership of the account
// uid by signing a message with the private key associated with the account uid
// and attaching the signature to the request as a `signature` field in the request header.
message ListPricesRequest {
  // Required. The uid of the account to list prices for.
  string uid = 1;

  // Optional. The size of the page. The default is defined by the server.
  int32 page_size = 2;
  
  // Optional. The page token for requesting next pages.
  string page_token = 3;
}

// The List prices Response used to list all prices for an account.
message ListPricessResponse {
  // The list of prices for the account.
  repeated Price prices = 1;

  // The token to be used for requesting the next page of prices.
  // If this field is empty, there are no more pages to be requested.
  string next_page_token = 2;
}
enum PriceType {
  // The price type is unknown.
   PRICE_TYPE_UNKNOWN = 0;

   // The price is an open price. This means that the customer can choose how much to pay.
   // The platform will omit the amount and currency on price_info for this type of price.
   OPEN_PRICE = 1;

   // The price is a fixed price. This means that the customer will be charged a fixed amount.
   FIXED_PRICE = 2;
}

// Price represents a price that can be attached to a product.
// A price can be an open price, a fixed price, or a subscription price.
// It can be used to charge customers for a product or service.
message Price {
  // The unique identifyer of the price
  string id = 1;

  // A brief description of the price's purpose or what it represents.
  string description = 2;

  // The type of the price. The type of the price will determine how the price is charged to the customers.
  PriceType type = 3;
  
  // The price information that will be used to charge the customers. A price can have multiple
  // price information localized for different currencies or different amounts.
  // For example, a price can have a fixed price in USD and a fixed price in EUR.
  // The price information will be used to charge the customers based on their location or
  // the currency they choose to pay with. If the price is an open price, the amount will be 0
  // but the currency will still be set. If there is only one price information, and the customer
  // wants to pay in a different currency, the platform will convert the amount to the
  // customer's currency using the current exchange rate. If the price has multiple pricing information,
  // the platform will use the first one that matches the customer's currency. 
  repeated price_info info = 4;

  // The platform percentage fee (0.01-0.99) that will be substracted from the amount charged to the customers.
  // This fee is charged by the platform for processing the payment and providing the service.
  // The platform fee is charged in the same currency as the price. 
  // There is a minimum 1% fee to be enforced by the platform.
  float platform_fee_pct = 5;
}

// price information that will be used to charge the customers.
// The total amount charged to the customers will be amount, but the net amount received
// by the account will be amount - platform_fee_pct*amount - payment processing fees. 
message price_info {
  // The amount to charge to the customers with decimal precision in cents
  // $5.34 would be represented as 5.34 and $1.00 would be represented as 1.00.
  // Omitted for open prices, where the customer can choose how much to pay.
  float amount = 1;

  // The currency the price is denominated in. This currency field is a three-letter ISO 4217 
  // currency code, such as "USD" or "EUR". The currency could be different from the accounts
  // default currency (based on the country of the account).
  // Omitted for open prices, where the currency will be set based on the customer's location.
  string currency = 2;
}