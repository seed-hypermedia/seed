// Code generated by sqlitegen. DO NOT EDIT.

package storage

import (
	"seed/backend/util/sqlitegen"
)

// Table blob_links.
const (
	BlobLinks       sqlitegen.Table  = "blob_links"
	BlobLinksSource sqlitegen.Column = "blob_links.source"
	BlobLinksTarget sqlitegen.Column = "blob_links.target"
	BlobLinksType   sqlitegen.Column = "blob_links.type"
)

// Table blob_links. Plain strings.
const (
	T_BlobLinks       = "blob_links"
	C_BlobLinksSource = "blob_links.source"
	C_BlobLinksTarget = "blob_links.target"
	C_BlobLinksType   = "blob_links.type"
)

// Table blobs.
const (
	Blobs           sqlitegen.Table  = "blobs"
	BlobsCodec      sqlitegen.Column = "blobs.codec"
	BlobsData       sqlitegen.Column = "blobs.data"
	BlobsID         sqlitegen.Column = "blobs.id"
	BlobsInsertTime sqlitegen.Column = "blobs.insert_time"
	BlobsMultihash  sqlitegen.Column = "blobs.multihash"
	BlobsSize       sqlitegen.Column = "blobs.size"
)

// Table blobs. Plain strings.
const (
	T_Blobs           = "blobs"
	C_BlobsCodec      = "blobs.codec"
	C_BlobsData       = "blobs.data"
	C_BlobsID         = "blobs.id"
	C_BlobsInsertTime = "blobs.insert_time"
	C_BlobsMultihash  = "blobs.multihash"
	C_BlobsSize       = "blobs.size"
)

// Table document_generations.
const (
	DocumentGenerations                     sqlitegen.Table  = "document_generations"
	DocumentGenerationsAuthors              sqlitegen.Column = "document_generations.authors"
	DocumentGenerationsChangeCount          sqlitegen.Column = "document_generations.change_count"
	DocumentGenerationsChanges              sqlitegen.Column = "document_generations.changes"
	DocumentGenerationsCommentCount         sqlitegen.Column = "document_generations.comment_count"
	DocumentGenerationsGeneration           sqlitegen.Column = "document_generations.generation"
	DocumentGenerationsGenesis              sqlitegen.Column = "document_generations.genesis"
	DocumentGenerationsGenesisChangeTime    sqlitegen.Column = "document_generations.genesis_change_time"
	DocumentGenerationsHeads                sqlitegen.Column = "document_generations.heads"
	DocumentGenerationsIsDeleted            sqlitegen.Column = "document_generations.is_deleted"
	DocumentGenerationsLastActivityTime     sqlitegen.Column = "document_generations.last_activity_time"
	DocumentGenerationsLastAliveRefTime     sqlitegen.Column = "document_generations.last_alive_ref_time"
	DocumentGenerationsLastChangeTime       sqlitegen.Column = "document_generations.last_change_time"
	DocumentGenerationsLastComment          sqlitegen.Column = "document_generations.last_comment"
	DocumentGenerationsLastCommentTime      sqlitegen.Column = "document_generations.last_comment_time"
	DocumentGenerationsLastTombstoneRefTime sqlitegen.Column = "document_generations.last_tombstone_ref_time"
	DocumentGenerationsMetadata             sqlitegen.Column = "document_generations.metadata"
	DocumentGenerationsResource             sqlitegen.Column = "document_generations.resource"
)

// Table document_generations. Plain strings.
const (
	T_DocumentGenerations                     = "document_generations"
	C_DocumentGenerationsAuthors              = "document_generations.authors"
	C_DocumentGenerationsChangeCount          = "document_generations.change_count"
	C_DocumentGenerationsChanges              = "document_generations.changes"
	C_DocumentGenerationsCommentCount         = "document_generations.comment_count"
	C_DocumentGenerationsGeneration           = "document_generations.generation"
	C_DocumentGenerationsGenesis              = "document_generations.genesis"
	C_DocumentGenerationsGenesisChangeTime    = "document_generations.genesis_change_time"
	C_DocumentGenerationsHeads                = "document_generations.heads"
	C_DocumentGenerationsIsDeleted            = "document_generations.is_deleted"
	C_DocumentGenerationsLastActivityTime     = "document_generations.last_activity_time"
	C_DocumentGenerationsLastAliveRefTime     = "document_generations.last_alive_ref_time"
	C_DocumentGenerationsLastChangeTime       = "document_generations.last_change_time"
	C_DocumentGenerationsLastComment          = "document_generations.last_comment"
	C_DocumentGenerationsLastCommentTime      = "document_generations.last_comment_time"
	C_DocumentGenerationsLastTombstoneRefTime = "document_generations.last_tombstone_ref_time"
	C_DocumentGenerationsMetadata             = "document_generations.metadata"
	C_DocumentGenerationsResource             = "document_generations.resource"
)

// Table fts.
const (
	Fts           sqlitegen.Table  = "fts"
	FtsBlockID    sqlitegen.Column = "fts.block_id"
	FtsFts        sqlitegen.Column = "fts.fts"
	FtsMultihash  sqlitegen.Column = "fts.multihash"
	FtsRank       sqlitegen.Column = "fts.rank"
	FtsRawContent sqlitegen.Column = "fts.raw_content"
	FtsType       sqlitegen.Column = "fts.type"
)

// Table fts. Plain strings.
const (
	T_Fts           = "fts"
	C_FtsBlockID    = "fts.block_id"
	C_FtsFts        = "fts.fts"
	C_FtsMultihash  = "fts.multihash"
	C_FtsRank       = "fts.rank"
	C_FtsRawContent = "fts.raw_content"
	C_FtsType       = "fts.type"
)

// Table fts_config.
const (
	FtsConfig  sqlitegen.Table  = "fts_config"
	FtsConfigK sqlitegen.Column = "fts_config.k"
	FtsConfigV sqlitegen.Column = "fts_config.v"
)

// Table fts_config. Plain strings.
const (
	T_FtsConfig  = "fts_config"
	C_FtsConfigK = "fts_config.k"
	C_FtsConfigV = "fts_config.v"
)

// Table fts_content.
const (
	FtsContent   sqlitegen.Table  = "fts_content"
	FtsContentC0 sqlitegen.Column = "fts_content.c0"
	FtsContentC1 sqlitegen.Column = "fts_content.c1"
	FtsContentC2 sqlitegen.Column = "fts_content.c2"
	FtsContentC3 sqlitegen.Column = "fts_content.c3"
	FtsContentID sqlitegen.Column = "fts_content.id"
)

// Table fts_content. Plain strings.
const (
	T_FtsContent   = "fts_content"
	C_FtsContentC0 = "fts_content.c0"
	C_FtsContentC1 = "fts_content.c1"
	C_FtsContentC2 = "fts_content.c2"
	C_FtsContentC3 = "fts_content.c3"
	C_FtsContentID = "fts_content.id"
)

// Table fts_data.
const (
	FtsData      sqlitegen.Table  = "fts_data"
	FtsDataBlock sqlitegen.Column = "fts_data.block"
	FtsDataID    sqlitegen.Column = "fts_data.id"
)

// Table fts_data. Plain strings.
const (
	T_FtsData      = "fts_data"
	C_FtsDataBlock = "fts_data.block"
	C_FtsDataID    = "fts_data.id"
)

// Table fts_docsize.
const (
	FtsDocsize   sqlitegen.Table  = "fts_docsize"
	FtsDocsizeID sqlitegen.Column = "fts_docsize.id"
	FtsDocsizeSz sqlitegen.Column = "fts_docsize.sz"
)

// Table fts_docsize. Plain strings.
const (
	T_FtsDocsize   = "fts_docsize"
	C_FtsDocsizeID = "fts_docsize.id"
	C_FtsDocsizeSz = "fts_docsize.sz"
)

// Table fts_idx.
const (
	FtsIdx      sqlitegen.Table  = "fts_idx"
	FtsIdxPgno  sqlitegen.Column = "fts_idx.pgno"
	FtsIdxSegid sqlitegen.Column = "fts_idx.segid"
	FtsIdxTerm  sqlitegen.Column = "fts_idx.term"
)

// Table fts_idx. Plain strings.
const (
	T_FtsIdx      = "fts_idx"
	C_FtsIdxPgno  = "fts_idx.pgno"
	C_FtsIdxSegid = "fts_idx.segid"
	C_FtsIdxTerm  = "fts_idx.term"
)

// Table kv.
const (
	KV      sqlitegen.Table  = "kv"
	KVKey   sqlitegen.Column = "kv.key"
	KVValue sqlitegen.Column = "kv.value"
)

// Table kv. Plain strings.
const (
	T_KV      = "kv"
	C_KVKey   = "kv.key"
	C_KVValue = "kv.value"
)

// Table peers.
const (
	Peers                    sqlitegen.Table  = "peers"
	PeersAddresses           sqlitegen.Column = "peers.addresses"
	PeersCreatedAt           sqlitegen.Column = "peers.created_at"
	PeersExplicitlyConnected sqlitegen.Column = "peers.explicitly_connected"
	PeersID                  sqlitegen.Column = "peers.id"
	PeersPid                 sqlitegen.Column = "peers.pid"
	PeersUpdatedAt           sqlitegen.Column = "peers.updated_at"
)

// Table peers. Plain strings.
const (
	T_Peers                    = "peers"
	C_PeersAddresses           = "peers.addresses"
	C_PeersCreatedAt           = "peers.created_at"
	C_PeersExplicitlyConnected = "peers.explicitly_connected"
	C_PeersID                  = "peers.id"
	C_PeersPid                 = "peers.pid"
	C_PeersUpdatedAt           = "peers.updated_at"
)

// Table public_keys.
const (
	PublicKeys          sqlitegen.Table  = "public_keys"
	PublicKeysID        sqlitegen.Column = "public_keys.id"
	PublicKeysPrincipal sqlitegen.Column = "public_keys.principal"
)

// Table public_keys. Plain strings.
const (
	T_PublicKeys          = "public_keys"
	C_PublicKeysID        = "public_keys.id"
	C_PublicKeysPrincipal = "public_keys.principal"
)

// Table resource_links.
const (
	ResourceLinks           sqlitegen.Table  = "resource_links"
	ResourceLinksExtraAttrs sqlitegen.Column = "resource_links.extra_attrs"
	ResourceLinksID         sqlitegen.Column = "resource_links.id"
	ResourceLinksIsPinned   sqlitegen.Column = "resource_links.is_pinned"
	ResourceLinksSource     sqlitegen.Column = "resource_links.source"
	ResourceLinksTarget     sqlitegen.Column = "resource_links.target"
	ResourceLinksType       sqlitegen.Column = "resource_links.type"
)

// Table resource_links. Plain strings.
const (
	T_ResourceLinks           = "resource_links"
	C_ResourceLinksExtraAttrs = "resource_links.extra_attrs"
	C_ResourceLinksID         = "resource_links.id"
	C_ResourceLinksIsPinned   = "resource_links.is_pinned"
	C_ResourceLinksSource     = "resource_links.source"
	C_ResourceLinksTarget     = "resource_links.target"
	C_ResourceLinksType       = "resource_links.type"
)

// Table resources.
const (
	Resources            sqlitegen.Table  = "resources"
	ResourcesCreateTime  sqlitegen.Column = "resources.create_time"
	ResourcesGenesisBlob sqlitegen.Column = "resources.genesis_blob"
	ResourcesID          sqlitegen.Column = "resources.id"
	ResourcesIRI         sqlitegen.Column = "resources.iri"
	ResourcesOwner       sqlitegen.Column = "resources.owner"
)

// Table resources. Plain strings.
const (
	T_Resources            = "resources"
	C_ResourcesCreateTime  = "resources.create_time"
	C_ResourcesGenesisBlob = "resources.genesis_blob"
	C_ResourcesID          = "resources.id"
	C_ResourcesIRI         = "resources.iri"
	C_ResourcesOwner       = "resources.owner"
)

// Table spaces.
const (
	Spaces                sqlitegen.Table  = "spaces"
	SpacesCommentCount    sqlitegen.Column = "spaces.comment_count"
	SpacesID              sqlitegen.Column = "spaces.id"
	SpacesLastChangeTime  sqlitegen.Column = "spaces.last_change_time"
	SpacesLastComment     sqlitegen.Column = "spaces.last_comment"
	SpacesLastCommentTime sqlitegen.Column = "spaces.last_comment_time"
)

// Table spaces. Plain strings.
const (
	T_Spaces                = "spaces"
	C_SpacesCommentCount    = "spaces.comment_count"
	C_SpacesID              = "spaces.id"
	C_SpacesLastChangeTime  = "spaces.last_change_time"
	C_SpacesLastComment     = "spaces.last_comment"
	C_SpacesLastCommentTime = "spaces.last_comment_time"
)

// Table sqlite_sequence.
const (
	SQLiteSequence     sqlitegen.Table  = "sqlite_sequence"
	SQLiteSequenceName sqlitegen.Column = "sqlite_sequence.name"
	SQLiteSequenceSeq  sqlitegen.Column = "sqlite_sequence.seq"
)

// Table sqlite_sequence. Plain strings.
const (
	T_SQLiteSequence     = "sqlite_sequence"
	C_SQLiteSequenceName = "sqlite_sequence.name"
	C_SQLiteSequenceSeq  = "sqlite_sequence.seq"
)

// Table stashed_blobs.
const (
	StashedBlobs           sqlitegen.Table  = "stashed_blobs"
	StashedBlobsExtraAttrs sqlitegen.Column = "stashed_blobs.extra_attrs"
	StashedBlobsID         sqlitegen.Column = "stashed_blobs.id"
	StashedBlobsReason     sqlitegen.Column = "stashed_blobs.reason"
)

// Table stashed_blobs. Plain strings.
const (
	T_StashedBlobs           = "stashed_blobs"
	C_StashedBlobsExtraAttrs = "stashed_blobs.extra_attrs"
	C_StashedBlobsID         = "stashed_blobs.id"
	C_StashedBlobsReason     = "stashed_blobs.reason"
)

// Table structural_blobs.
const (
	StructuralBlobs            sqlitegen.Table  = "structural_blobs"
	StructuralBlobsAuthor      sqlitegen.Column = "structural_blobs.author"
	StructuralBlobsExtraAttrs  sqlitegen.Column = "structural_blobs.extra_attrs"
	StructuralBlobsGenesisBlob sqlitegen.Column = "structural_blobs.genesis_blob"
	StructuralBlobsID          sqlitegen.Column = "structural_blobs.id"
	StructuralBlobsResource    sqlitegen.Column = "structural_blobs.resource"
	StructuralBlobsTs          sqlitegen.Column = "structural_blobs.ts"
	StructuralBlobsType        sqlitegen.Column = "structural_blobs.type"
)

// Table structural_blobs. Plain strings.
const (
	T_StructuralBlobs            = "structural_blobs"
	C_StructuralBlobsAuthor      = "structural_blobs.author"
	C_StructuralBlobsExtraAttrs  = "structural_blobs.extra_attrs"
	C_StructuralBlobsGenesisBlob = "structural_blobs.genesis_blob"
	C_StructuralBlobsID          = "structural_blobs.id"
	C_StructuralBlobsResource    = "structural_blobs.resource"
	C_StructuralBlobsTs          = "structural_blobs.ts"
	C_StructuralBlobsType        = "structural_blobs.type"
)

// Table subscriptions.
const (
	Subscriptions            sqlitegen.Table  = "subscriptions"
	SubscriptionsID          sqlitegen.Column = "subscriptions.id"
	SubscriptionsInsertTime  sqlitegen.Column = "subscriptions.insert_time"
	SubscriptionsIRI         sqlitegen.Column = "subscriptions.iri"
	SubscriptionsIsRecursive sqlitegen.Column = "subscriptions.is_recursive"
)

// Table subscriptions. Plain strings.
const (
	T_Subscriptions            = "subscriptions"
	C_SubscriptionsID          = "subscriptions.id"
	C_SubscriptionsInsertTime  = "subscriptions.insert_time"
	C_SubscriptionsIRI         = "subscriptions.iri"
	C_SubscriptionsIsRecursive = "subscriptions.is_recursive"
)

// Table unread_resources.
const (
	UnreadResources    sqlitegen.Table  = "unread_resources"
	UnreadResourcesIRI sqlitegen.Column = "unread_resources.iri"
)

// Table unread_resources. Plain strings.
const (
	T_UnreadResources    = "unread_resources"
	C_UnreadResourcesIRI = "unread_resources.iri"
)

// Table wallets.
const (
	Wallets         sqlitegen.Table  = "wallets"
	WalletsAccount  sqlitegen.Column = "wallets.account"
	WalletsAddress  sqlitegen.Column = "wallets.address"
	WalletsID       sqlitegen.Column = "wallets.id"
	WalletsLogin    sqlitegen.Column = "wallets.login"
	WalletsName     sqlitegen.Column = "wallets.name"
	WalletsPassword sqlitegen.Column = "wallets.password"
	WalletsToken    sqlitegen.Column = "wallets.token"
	WalletsType     sqlitegen.Column = "wallets.type"
)

// Table wallets. Plain strings.
const (
	T_Wallets         = "wallets"
	C_WalletsAccount  = "wallets.account"
	C_WalletsAddress  = "wallets.address"
	C_WalletsID       = "wallets.id"
	C_WalletsLogin    = "wallets.login"
	C_WalletsName     = "wallets.name"
	C_WalletsPassword = "wallets.password"
	C_WalletsToken    = "wallets.token"
	C_WalletsType     = "wallets.type"
)

// Schema describes SQLite columns.
var Schema = sqlitegen.Schema{
	Columns: map[sqlitegen.Column]sqlitegen.ColumnInfo{
		BlobLinksSource:                         {Table: BlobLinks, SQLType: "INTEGER"},
		BlobLinksTarget:                         {Table: BlobLinks, SQLType: "INTEGER"},
		BlobLinksType:                           {Table: BlobLinks, SQLType: "TEXT"},
		BlobsCodec:                              {Table: Blobs, SQLType: "INTEGER"},
		BlobsData:                               {Table: Blobs, SQLType: "BLOB"},
		BlobsID:                                 {Table: Blobs, SQLType: "INTEGER"},
		BlobsInsertTime:                         {Table: Blobs, SQLType: "INTEGER"},
		BlobsMultihash:                          {Table: Blobs, SQLType: "BLOB"},
		BlobsSize:                               {Table: Blobs, SQLType: "INTEGER"},
		DocumentGenerationsAuthors:              {Table: DocumentGenerations, SQLType: "JSON"},
		DocumentGenerationsChangeCount:          {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsChanges:              {Table: DocumentGenerations, SQLType: "BLOB"},
		DocumentGenerationsCommentCount:         {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsGeneration:           {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsGenesis:              {Table: DocumentGenerations, SQLType: "TEXT"},
		DocumentGenerationsGenesisChangeTime:    {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsHeads:                {Table: DocumentGenerations, SQLType: "JSON"},
		DocumentGenerationsIsDeleted:            {Table: DocumentGenerations, SQLType: ""},
		DocumentGenerationsLastActivityTime:     {Table: DocumentGenerations, SQLType: ""},
		DocumentGenerationsLastAliveRefTime:     {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsLastChangeTime:       {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsLastComment:          {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsLastCommentTime:      {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsLastTombstoneRefTime: {Table: DocumentGenerations, SQLType: "INTEGER"},
		DocumentGenerationsMetadata:             {Table: DocumentGenerations, SQLType: "JSON"},
		DocumentGenerationsResource:             {Table: DocumentGenerations, SQLType: "INTEGER"},
		FtsBlockID:                              {Table: Fts, SQLType: ""},
		FtsFts:                                  {Table: Fts, SQLType: ""},
		FtsMultihash:                            {Table: Fts, SQLType: ""},
		FtsRank:                                 {Table: Fts, SQLType: ""},
		FtsRawContent:                           {Table: Fts, SQLType: ""},
		FtsType:                                 {Table: Fts, SQLType: ""},
		FtsConfigK:                              {Table: FtsConfig, SQLType: ""},
		FtsConfigV:                              {Table: FtsConfig, SQLType: ""},
		FtsContentC0:                            {Table: FtsContent, SQLType: ""},
		FtsContentC1:                            {Table: FtsContent, SQLType: ""},
		FtsContentC2:                            {Table: FtsContent, SQLType: ""},
		FtsContentC3:                            {Table: FtsContent, SQLType: ""},
		FtsContentID:                            {Table: FtsContent, SQLType: "INTEGER"},
		FtsDataBlock:                            {Table: FtsData, SQLType: "BLOB"},
		FtsDataID:                               {Table: FtsData, SQLType: "INTEGER"},
		FtsDocsizeID:                            {Table: FtsDocsize, SQLType: "INTEGER"},
		FtsDocsizeSz:                            {Table: FtsDocsize, SQLType: "BLOB"},
		FtsIdxPgno:                              {Table: FtsIdx, SQLType: ""},
		FtsIdxSegid:                             {Table: FtsIdx, SQLType: ""},
		FtsIdxTerm:                              {Table: FtsIdx, SQLType: ""},
		KVKey:                                   {Table: KV, SQLType: "TEXT"},
		KVValue:                                 {Table: KV, SQLType: "TEXT"},
		PeersAddresses:                          {Table: Peers, SQLType: "TEXT"},
		PeersCreatedAt:                          {Table: Peers, SQLType: "INTEGER"},
		PeersExplicitlyConnected:                {Table: Peers, SQLType: "BOOLEAN"},
		PeersID:                                 {Table: Peers, SQLType: "INTEGER"},
		PeersPid:                                {Table: Peers, SQLType: "TEXT"},
		PeersUpdatedAt:                          {Table: Peers, SQLType: "INTEGER"},
		PublicKeysID:                            {Table: PublicKeys, SQLType: "INTEGER"},
		PublicKeysPrincipal:                     {Table: PublicKeys, SQLType: "BLOB"},
		ResourceLinksExtraAttrs:                 {Table: ResourceLinks, SQLType: "JSONB"},
		ResourceLinksID:                         {Table: ResourceLinks, SQLType: "INTEGER"},
		ResourceLinksIsPinned:                   {Table: ResourceLinks, SQLType: "INTEGER"},
		ResourceLinksSource:                     {Table: ResourceLinks, SQLType: "INTEGER"},
		ResourceLinksTarget:                     {Table: ResourceLinks, SQLType: "INTEGER"},
		ResourceLinksType:                       {Table: ResourceLinks, SQLType: "TEXT"},
		ResourcesCreateTime:                     {Table: Resources, SQLType: "INTEGER"},
		ResourcesGenesisBlob:                    {Table: Resources, SQLType: "INTEGER"},
		ResourcesID:                             {Table: Resources, SQLType: "INTEGER"},
		ResourcesIRI:                            {Table: Resources, SQLType: "TEXT"},
		ResourcesOwner:                          {Table: Resources, SQLType: "INTEGER"},
		SpacesCommentCount:                      {Table: Spaces, SQLType: "INTEGER"},
		SpacesID:                                {Table: Spaces, SQLType: "TEXT"},
		SpacesLastChangeTime:                    {Table: Spaces, SQLType: "INTEGER"},
		SpacesLastComment:                       {Table: Spaces, SQLType: "INTEGER"},
		SpacesLastCommentTime:                   {Table: Spaces, SQLType: "INTEGER"},
		SQLiteSequenceName:                      {Table: SQLiteSequence, SQLType: ""},
		SQLiteSequenceSeq:                       {Table: SQLiteSequence, SQLType: ""},
		StashedBlobsExtraAttrs:                  {Table: StashedBlobs, SQLType: "JSON"},
		StashedBlobsID:                          {Table: StashedBlobs, SQLType: "INTEGER"},
		StashedBlobsReason:                      {Table: StashedBlobs, SQLType: "TEXT"},
		StructuralBlobsAuthor:                   {Table: StructuralBlobs, SQLType: "INTEGER"},
		StructuralBlobsExtraAttrs:               {Table: StructuralBlobs, SQLType: "JSONB"},
		StructuralBlobsGenesisBlob:              {Table: StructuralBlobs, SQLType: "INTEGER"},
		StructuralBlobsID:                       {Table: StructuralBlobs, SQLType: "INTEGER"},
		StructuralBlobsResource:                 {Table: StructuralBlobs, SQLType: "INTEGER"},
		StructuralBlobsTs:                       {Table: StructuralBlobs, SQLType: "INTEGER"},
		StructuralBlobsType:                     {Table: StructuralBlobs, SQLType: "TEXT"},
		SubscriptionsID:                         {Table: Subscriptions, SQLType: "INTEGER"},
		SubscriptionsInsertTime:                 {Table: Subscriptions, SQLType: "INTEGER"},
		SubscriptionsIRI:                        {Table: Subscriptions, SQLType: "TEXT"},
		SubscriptionsIsRecursive:                {Table: Subscriptions, SQLType: "BOOLEAN"},
		UnreadResourcesIRI:                      {Table: UnreadResources, SQLType: "TEXT"},
		WalletsAccount:                          {Table: Wallets, SQLType: "INTEGER"},
		WalletsAddress:                          {Table: Wallets, SQLType: "TEXT"},
		WalletsID:                               {Table: Wallets, SQLType: "TEXT"},
		WalletsLogin:                            {Table: Wallets, SQLType: "BLOB"},
		WalletsName:                             {Table: Wallets, SQLType: "TEXT"},
		WalletsPassword:                         {Table: Wallets, SQLType: "BLOB"},
		WalletsToken:                            {Table: Wallets, SQLType: "BLOB"},
		WalletsType:                             {Table: Wallets, SQLType: "TEXT"},
	},
}
