// Code generated by sqlitegen. DO NOT EDIT.

package walletsql

import (
	"errors"
	"fmt"

	"seed/backend/util/sqlite"
	"seed/backend/util/sqlitegen"
)

var _ = errors.New

func insertWallet(conn *sqlite.Conn, walletsID string, walletsAccount int64, walletsAddress string, walletsType string, walletsLogin []byte, walletsPassword []byte, walletsToken []byte, walletsName string, walletsBalance int64) error {
	const query = `INSERT INTO wallets (id, account, address, type, login, password, token, name, balance)
VALUES (:walletsID, :walletsAccount, :walletsAddress, :walletsType, :walletsLogin, :walletsPassword, :walletsToken, :walletsName, :walletsBalance)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":walletsID", walletsID)
		stmt.SetInt64(":walletsAccount", walletsAccount)
		stmt.SetText(":walletsAddress", walletsAddress)
		stmt.SetText(":walletsType", walletsType)
		stmt.SetBytes(":walletsLogin", walletsLogin)
		stmt.SetBytes(":walletsPassword", walletsPassword)
		stmt.SetBytes(":walletsToken", walletsToken)
		stmt.SetText(":walletsName", walletsName)
		stmt.SetInt64(":walletsBalance", walletsBalance)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: insertWallet: %w", err)
	}

	return err
}

type getWalletResult struct {
	WalletsID      string
	WalletsAccount int64
	WalletsAddress string
	WalletsName    string
	WalletsBalance int64
	WalletsType    string
}

func getWallet(conn *sqlite.Conn, walletsID string) (getWalletResult, error) {
	const query = `SELECT wallets.id, wallets.account, wallets.address, wallets.name, wallets.balance, wallets.type
FROM wallets WHERE wallets.id = :walletsID`

	var out getWalletResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":walletsID", walletsID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("getWallet: more than one result return for a single-kind query")
		}

		out.WalletsID = stmt.ColumnText(0)
		out.WalletsAccount = stmt.ColumnInt64(1)
		out.WalletsAddress = stmt.ColumnText(2)
		out.WalletsName = stmt.ColumnText(3)
		out.WalletsBalance = stmt.ColumnInt64(4)
		out.WalletsType = stmt.ColumnText(5)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: getWallet: %w", err)
	}

	return out, err
}

type listWalletsResult struct {
	WalletsID      string
	WalletsAccount int64
	WalletsAddress string
	WalletsName    string
	WalletsType    string
	WalletsBalance int64
}

func listWallets(conn *sqlite.Conn, cursor string, limit int64) ([]listWalletsResult, error) {
	const query = `SELECT wallets.id, wallets.account, wallets.address, wallets.name, wallets.type, wallets.balance FROM wallets WHERE wallets.id > :cursor LIMIT :limit`

	var out []listWalletsResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":cursor", cursor)
		stmt.SetInt64(":limit", limit)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, listWalletsResult{
			WalletsID:      stmt.ColumnText(0),
			WalletsAccount: stmt.ColumnInt64(1),
			WalletsAddress: stmt.ColumnText(2),
			WalletsName:    stmt.ColumnText(3),
			WalletsType:    stmt.ColumnText(4),
			WalletsBalance: stmt.ColumnInt64(5),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: listWallets: %w", err)
	}

	return out, err
}

func setLoginSignature(conn *sqlite.Conn, kvKey string, kvValue string) error {
	const query = `INSERT OR REPLACE INTO kv (key, value)
VALUES (:kvKey, :kvValue)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":kvKey", kvKey)
		stmt.SetText(":kvValue", kvValue)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: setLoginSignature: %w", err)
	}

	return err
}

func removeDefaultWallet(conn *sqlite.Conn, key string) error {
	const query = `DELETE FROM kv WHERE kv.key = :key `

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":key", key)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: removeDefaultWallet: %w", err)
	}

	return err
}

func updateWalletName(conn *sqlite.Conn, walletsName string, walletsID string) error {
	const query = `UPDATE wallets SET (name)
=( :walletsName ) WHERE wallets.id = :walletsID`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":walletsName", walletsName)
		stmt.SetText(":walletsID", walletsID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: updateWalletName: %w", err)
	}

	return err
}

func removeWallet(conn *sqlite.Conn, walletsID string) error {
	const query = `DELETE FROM wallets WHERE wallets.id = :walletsID`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":walletsID", walletsID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: removeWallet: %w", err)
	}

	return err
}

type getWalletCountResult struct {
	Count int64
}

func getWalletCount(conn *sqlite.Conn) (getWalletCountResult, error) {
	const query = `SELECT COUNT(wallets.id) AS count FROM wallets`

	var out getWalletCountResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("getWalletCount: more than one result return for a single-kind query")
		}

		out.Count = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: getWalletCount: %w", err)
	}

	return out, err
}
