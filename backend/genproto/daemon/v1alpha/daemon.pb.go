// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.24.4
// source: daemon/v1alpha/daemon.proto

package daemon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State describes various states of the daemon.
type State int32

const (
	// Daemon in starting up and it not ready to use yet.
	State_STARTING State = 0
	// Daemon is running a data migration, which may take a while.
	// Callers should poll and wait until the daemon becomes ACTIVE.
	State_MIGRATING State = 1
	// Daemon is active and ready to use.
	State_ACTIVE State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STARTING",
		1: "MIGRATING",
		3: "ACTIVE",
	}
	State_value = map[string]int32{
		"STARTING":  0,
		"MIGRATING": 1,
		"ACTIVE":    3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_daemon_v1alpha_daemon_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_daemon_v1alpha_daemon_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{0}
}

// Request to generate mnemonic words.
type GenMnemonicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Number of mnemonic words to encode the seed.
	// Usually 12 or 24 words.
	// By default 12 words are generated.
	WordCount     int32 `protobuf:"varint,1,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenMnemonicRequest) Reset() {
	*x = GenMnemonicRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenMnemonicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenMnemonicRequest) ProtoMessage() {}

func (x *GenMnemonicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenMnemonicRequest.ProtoReflect.Descriptor instead.
func (*GenMnemonicRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{0}
}

func (x *GenMnemonicRequest) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

// Response with the generated mnemonic.
type GenMnemonicResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of human-friendly words that can be used to backup the seed. These
	// words must be stored in a secret place by the user.
	Mnemonic      []string `protobuf:"bytes,1,rep,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenMnemonicResponse) Reset() {
	*x = GenMnemonicResponse{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenMnemonicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenMnemonicResponse) ProtoMessage() {}

func (x *GenMnemonicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenMnemonicResponse.ProtoReflect.Descriptor instead.
func (*GenMnemonicResponse) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{1}
}

func (x *GenMnemonicResponse) GetMnemonic() []string {
	if x != nil {
		return x.Mnemonic
	}
	return nil
}

// Request to register a new account key derived from the mnemonic.
type RegisterKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The list of BIP-39 mnemonic words.
	Mnemonic []string `protobuf:"bytes,1,rep,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// Optional. Passphrase for the seed.
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	// Required. Private name/label for the signing key, to easily identify keys when they are more than one.
	// Name must be unique across all the registered keys.
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterKeyRequest) Reset() {
	*x = RegisterKeyRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKeyRequest) ProtoMessage() {}

func (x *RegisterKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterKeyRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterKeyRequest) GetMnemonic() []string {
	if x != nil {
		return x.Mnemonic
	}
	return nil
}

func (x *RegisterKeyRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *RegisterKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request to get basic information about the running daemon.
type GetInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{3}
}

// Request to force the syncing process.
type ForceSyncRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForceSyncRequest) Reset() {
	*x = ForceSyncRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceSyncRequest) ProtoMessage() {}

func (x *ForceSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceSyncRequest.ProtoReflect.Descriptor instead.
func (*ForceSyncRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{4}
}

// Request to delete all keys.
type DeleteAllKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAllKeysRequest) Reset() {
	*x = DeleteAllKeysRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAllKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllKeysRequest) ProtoMessage() {}

func (x *DeleteAllKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllKeysRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllKeysRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{5}
}

// Request to list signing keys.
type ListKeysRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{6}
}

// Response with the list of registered signing keys.
type ListKeysResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of registered keys.
	Keys          []*NamedKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKeysResponse) Reset() {
	*x = ListKeysResponse{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysResponse) ProtoMessage() {}

func (x *ListKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysResponse.ProtoReflect.Descriptor instead.
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{7}
}

func (x *ListKeysResponse) GetKeys() []*NamedKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Request to change the key name.
type UpdateKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current name of the key.
	CurrentName string `protobuf:"bytes,1,opt,name=current_name,json=currentName,proto3" json:"current_name,omitempty"`
	// New name for the key.
	NewName       string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKeyRequest) Reset() {
	*x = UpdateKeyRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKeyRequest) ProtoMessage() {}

func (x *UpdateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateKeyRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateKeyRequest) GetCurrentName() string {
	if x != nil {
		return x.CurrentName
	}
	return ""
}

func (x *UpdateKeyRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

// Request to delete an existing key.
type DeleteKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the key to delete.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKeyRequest) Reset() {
	*x = DeleteKeyRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyRequest) ProtoMessage() {}

func (x *DeleteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request to store blobs.
type StoreBlobsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. List of blobs to be stored.
	// The request is atomic: either all blobs are stored or none of them.
	Blobs         []*Blob `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreBlobsRequest) Reset() {
	*x = StoreBlobsRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreBlobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBlobsRequest) ProtoMessage() {}

func (x *StoreBlobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBlobsRequest.ProtoReflect.Descriptor instead.
func (*StoreBlobsRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{10}
}

func (x *StoreBlobsRequest) GetBlobs() []*Blob {
	if x != nil {
		return x.Blobs
	}
	return nil
}

// Response after storing blobs.
type StoreBlobsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of CIDs for the stored blobs.
	// The order is the same as in the request.
	Cids          []string `protobuf:"bytes,1,rep,name=cids,proto3" json:"cids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreBlobsResponse) Reset() {
	*x = StoreBlobsResponse{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreBlobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBlobsResponse) ProtoMessage() {}

func (x *StoreBlobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBlobsResponse.ProtoReflect.Descriptor instead.
func (*StoreBlobsResponse) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{11}
}

func (x *StoreBlobsResponse) GetCids() []string {
	if x != nil {
		return x.Cids
	}
	return nil
}

// Request to create a new device link session.
type CreateDeviceLinkSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the signing key for which to create the delegation.
	SigningKeyName string `protobuf:"bytes,1,opt,name=signing_key_name,json=signingKeyName,proto3" json:"signing_key_name,omitempty"`
	// Optional. Label that will be used for the newly created capability.
	// The label is publicly visible.
	Label         string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceLinkSessionRequest) Reset() {
	*x = CreateDeviceLinkSessionRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceLinkSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceLinkSessionRequest) ProtoMessage() {}

func (x *CreateDeviceLinkSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceLinkSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceLinkSessionRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDeviceLinkSessionRequest) GetSigningKeyName() string {
	if x != nil {
		return x.SigningKeyName
	}
	return ""
}

func (x *CreateDeviceLinkSessionRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// Request to get the device link session.
type GetDeviceLinkSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceLinkSessionRequest) Reset() {
	*x = GetDeviceLinkSessionRequest{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceLinkSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceLinkSessionRequest) ProtoMessage() {}

func (x *GetDeviceLinkSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceLinkSessionRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceLinkSessionRequest) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{13}
}

// Information about the device link session.
type DeviceLinkSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Dial information for the node.
	AddrInfo *AddrInfo `protobuf:"bytes,1,opt,name=addr_info,json=addrInfo,proto3" json:"addr_info,omitempty"`
	// Secret token for the linking session.
	SecretToken string `protobuf:"bytes,2,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	// Account ID that wants to link the new device.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Label for the future capability as defined by the user.
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// Expiration time of the session.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Optional. Time when the session was redeemed,
	// i.e. when the device link exchange was completed successfully.
	RedeemTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=redeem_time,json=redeemTime,proto3" json:"redeem_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceLinkSession) Reset() {
	*x = DeviceLinkSession{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceLinkSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLinkSession) ProtoMessage() {}

func (x *DeviceLinkSession) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLinkSession.ProtoReflect.Descriptor instead.
func (*DeviceLinkSession) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceLinkSession) GetAddrInfo() *AddrInfo {
	if x != nil {
		return x.AddrInfo
	}
	return nil
}

func (x *DeviceLinkSession) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *DeviceLinkSession) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeviceLinkSession) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DeviceLinkSession) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *DeviceLinkSession) GetRedeemTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RedeemTime
	}
	return nil
}

// Address information about a single peer.
type AddrInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerId        string                 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Addrs         []string               `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddrInfo) Reset() {
	*x = AddrInfo{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddrInfo) ProtoMessage() {}

func (x *AddrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddrInfo.ProtoReflect.Descriptor instead.
func (*AddrInfo) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{15}
}

func (x *AddrInfo) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *AddrInfo) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

// Raw blob to be stored.
type Blob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The client can provide a CID for the blob (the server will verify it).
	// If not provided, the data is assumed to be DAG-CBOR encoded, and the server will generate a CID
	// using its default hash function.
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Required. Raw data of the blob.
	Data          []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Blob) Reset() {
	*x = Blob{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{16}
}

func (x *Blob) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *Blob) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Info is a generic information about the running node.
type Info struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state of the daemon.
	State State `protobuf:"varint,1,opt,name=state,proto3,enum=com.seed.daemon.v1alpha.State" json:"state,omitempty"`
	// Libp2p Peer ID of this node.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// Start time of the node.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The libp2p protocol ID that the daemon is using.
	ProtocolId    string `protobuf:"bytes,4,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Info) Reset() {
	*x = Info{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{17}
}

func (x *Info) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STARTING
}

func (x *Info) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *Info) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Info) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

// Signing key with an internal name.
type NamedKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key in Multikey format.
	// https://www.w3.org/TR/vc-data-integrity/#multikey.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Private name for the key. Useful to identify the keys when there're more than one.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Account ID representation of this key.
	AccountId     string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedKey) Reset() {
	*x = NamedKey{}
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedKey) ProtoMessage() {}

func (x *NamedKey) ProtoReflect() protoreflect.Message {
	mi := &file_daemon_v1alpha_daemon_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedKey.ProtoReflect.Descriptor instead.
func (*NamedKey) Descriptor() ([]byte, []int) {
	return file_daemon_v1alpha_daemon_proto_rawDescGZIP(), []int{18}
}

func (x *NamedKey) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *NamedKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedKey) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

var File_daemon_v1alpha_daemon_proto protoreflect.FileDescriptor

const file_daemon_v1alpha_daemon_proto_rawDesc = "" +
	"\n" +
	"\x1bdaemon/v1alpha/daemon.proto\x12\x17com.seed.daemon.v1alpha\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\"3\n" +
	"\x12GenMnemonicRequest\x12\x1d\n" +
	"\n" +
	"word_count\x18\x01 \x01(\x05R\twordCount\"1\n" +
	"\x13GenMnemonicResponse\x12\x1a\n" +
	"\bmnemonic\x18\x01 \x03(\tR\bmnemonic\"d\n" +
	"\x12RegisterKeyRequest\x12\x1a\n" +
	"\bmnemonic\x18\x01 \x03(\tR\bmnemonic\x12\x1e\n" +
	"\n" +
	"passphrase\x18\x02 \x01(\tR\n" +
	"passphrase\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\"\x10\n" +
	"\x0eGetInfoRequest\"\x12\n" +
	"\x10ForceSyncRequest\"\x16\n" +
	"\x14DeleteAllKeysRequest\"\x11\n" +
	"\x0fListKeysRequest\"I\n" +
	"\x10ListKeysResponse\x125\n" +
	"\x04keys\x18\x01 \x03(\v2!.com.seed.daemon.v1alpha.NamedKeyR\x04keys\"P\n" +
	"\x10UpdateKeyRequest\x12!\n" +
	"\fcurrent_name\x18\x01 \x01(\tR\vcurrentName\x12\x19\n" +
	"\bnew_name\x18\x02 \x01(\tR\anewName\"&\n" +
	"\x10DeleteKeyRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"H\n" +
	"\x11StoreBlobsRequest\x123\n" +
	"\x05blobs\x18\x01 \x03(\v2\x1d.com.seed.daemon.v1alpha.BlobR\x05blobs\"(\n" +
	"\x12StoreBlobsResponse\x12\x12\n" +
	"\x04cids\x18\x01 \x03(\tR\x04cids\"`\n" +
	"\x1eCreateDeviceLinkSessionRequest\x12(\n" +
	"\x10signing_key_name\x18\x01 \x01(\tR\x0esigningKeyName\x12\x14\n" +
	"\x05label\x18\x02 \x01(\tR\x05label\"\x1d\n" +
	"\x1bGetDeviceLinkSessionRequest\"\xa5\x02\n" +
	"\x11DeviceLinkSession\x12>\n" +
	"\taddr_info\x18\x01 \x01(\v2!.com.seed.daemon.v1alpha.AddrInfoR\baddrInfo\x12!\n" +
	"\fsecret_token\x18\x02 \x01(\tR\vsecretToken\x12\x1d\n" +
	"\n" +
	"account_id\x18\x03 \x01(\tR\taccountId\x12\x14\n" +
	"\x05label\x18\x04 \x01(\tR\x05label\x12;\n" +
	"\vexpire_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expireTime\x12;\n" +
	"\vredeem_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"redeemTime\"9\n" +
	"\bAddrInfo\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId\x12\x14\n" +
	"\x05addrs\x18\x02 \x03(\tR\x05addrs\",\n" +
	"\x04Blob\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"\xb1\x01\n" +
	"\x04Info\x124\n" +
	"\x05state\x18\x01 \x01(\x0e2\x1e.com.seed.daemon.v1alpha.StateR\x05state\x12\x17\n" +
	"\apeer_id\x18\x02 \x01(\tR\x06peerId\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12\x1f\n" +
	"\vprotocol_id\x18\x04 \x01(\tR\n" +
	"protocolId\"\\\n" +
	"\bNamedKey\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\tR\tpublicKey\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"account_id\x18\x03 \x01(\tR\taccountId*0\n" +
	"\x05State\x12\f\n" +
	"\bSTARTING\x10\x00\x12\r\n" +
	"\tMIGRATING\x10\x01\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x032\xb9\b\n" +
	"\x06Daemon\x12h\n" +
	"\vGenMnemonic\x12+.com.seed.daemon.v1alpha.GenMnemonicRequest\x1a,.com.seed.daemon.v1alpha.GenMnemonicResponse\x12]\n" +
	"\vRegisterKey\x12+.com.seed.daemon.v1alpha.RegisterKeyRequest\x1a!.com.seed.daemon.v1alpha.NamedKey\x12Q\n" +
	"\aGetInfo\x12'.com.seed.daemon.v1alpha.GetInfoRequest\x1a\x1d.com.seed.daemon.v1alpha.Info\x12N\n" +
	"\tForceSync\x12).com.seed.daemon.v1alpha.ForceSyncRequest\x1a\x16.google.protobuf.Empty\x12_\n" +
	"\bListKeys\x12(.com.seed.daemon.v1alpha.ListKeysRequest\x1a).com.seed.daemon.v1alpha.ListKeysResponse\x12Y\n" +
	"\tUpdateKey\x12).com.seed.daemon.v1alpha.UpdateKeyRequest\x1a!.com.seed.daemon.v1alpha.NamedKey\x12N\n" +
	"\tDeleteKey\x12).com.seed.daemon.v1alpha.DeleteKeyRequest\x1a\x16.google.protobuf.Empty\x12V\n" +
	"\rDeleteAllKeys\x12-.com.seed.daemon.v1alpha.DeleteAllKeysRequest\x1a\x16.google.protobuf.Empty\x12e\n" +
	"\n" +
	"StoreBlobs\x12*.com.seed.daemon.v1alpha.StoreBlobsRequest\x1a+.com.seed.daemon.v1alpha.StoreBlobsResponse\x12~\n" +
	"\x17CreateDeviceLinkSession\x127.com.seed.daemon.v1alpha.CreateDeviceLinkSessionRequest\x1a*.com.seed.daemon.v1alpha.DeviceLinkSession\x12x\n" +
	"\x14GetDeviceLinkSession\x124.com.seed.daemon.v1alpha.GetDeviceLinkSessionRequest\x1a*.com.seed.daemon.v1alpha.DeviceLinkSessionB-Z+seed/backend/genproto/daemon/v1alpha;daemonb\x06proto3"

var (
	file_daemon_v1alpha_daemon_proto_rawDescOnce sync.Once
	file_daemon_v1alpha_daemon_proto_rawDescData []byte
)

func file_daemon_v1alpha_daemon_proto_rawDescGZIP() []byte {
	file_daemon_v1alpha_daemon_proto_rawDescOnce.Do(func() {
		file_daemon_v1alpha_daemon_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_daemon_v1alpha_daemon_proto_rawDesc), len(file_daemon_v1alpha_daemon_proto_rawDesc)))
	})
	return file_daemon_v1alpha_daemon_proto_rawDescData
}

var file_daemon_v1alpha_daemon_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_daemon_v1alpha_daemon_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_daemon_v1alpha_daemon_proto_goTypes = []any{
	(State)(0),                             // 0: com.seed.daemon.v1alpha.State
	(*GenMnemonicRequest)(nil),             // 1: com.seed.daemon.v1alpha.GenMnemonicRequest
	(*GenMnemonicResponse)(nil),            // 2: com.seed.daemon.v1alpha.GenMnemonicResponse
	(*RegisterKeyRequest)(nil),             // 3: com.seed.daemon.v1alpha.RegisterKeyRequest
	(*GetInfoRequest)(nil),                 // 4: com.seed.daemon.v1alpha.GetInfoRequest
	(*ForceSyncRequest)(nil),               // 5: com.seed.daemon.v1alpha.ForceSyncRequest
	(*DeleteAllKeysRequest)(nil),           // 6: com.seed.daemon.v1alpha.DeleteAllKeysRequest
	(*ListKeysRequest)(nil),                // 7: com.seed.daemon.v1alpha.ListKeysRequest
	(*ListKeysResponse)(nil),               // 8: com.seed.daemon.v1alpha.ListKeysResponse
	(*UpdateKeyRequest)(nil),               // 9: com.seed.daemon.v1alpha.UpdateKeyRequest
	(*DeleteKeyRequest)(nil),               // 10: com.seed.daemon.v1alpha.DeleteKeyRequest
	(*StoreBlobsRequest)(nil),              // 11: com.seed.daemon.v1alpha.StoreBlobsRequest
	(*StoreBlobsResponse)(nil),             // 12: com.seed.daemon.v1alpha.StoreBlobsResponse
	(*CreateDeviceLinkSessionRequest)(nil), // 13: com.seed.daemon.v1alpha.CreateDeviceLinkSessionRequest
	(*GetDeviceLinkSessionRequest)(nil),    // 14: com.seed.daemon.v1alpha.GetDeviceLinkSessionRequest
	(*DeviceLinkSession)(nil),              // 15: com.seed.daemon.v1alpha.DeviceLinkSession
	(*AddrInfo)(nil),                       // 16: com.seed.daemon.v1alpha.AddrInfo
	(*Blob)(nil),                           // 17: com.seed.daemon.v1alpha.Blob
	(*Info)(nil),                           // 18: com.seed.daemon.v1alpha.Info
	(*NamedKey)(nil),                       // 19: com.seed.daemon.v1alpha.NamedKey
	(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                  // 21: google.protobuf.Empty
}
var file_daemon_v1alpha_daemon_proto_depIdxs = []int32{
	19, // 0: com.seed.daemon.v1alpha.ListKeysResponse.keys:type_name -> com.seed.daemon.v1alpha.NamedKey
	17, // 1: com.seed.daemon.v1alpha.StoreBlobsRequest.blobs:type_name -> com.seed.daemon.v1alpha.Blob
	16, // 2: com.seed.daemon.v1alpha.DeviceLinkSession.addr_info:type_name -> com.seed.daemon.v1alpha.AddrInfo
	20, // 3: com.seed.daemon.v1alpha.DeviceLinkSession.expire_time:type_name -> google.protobuf.Timestamp
	20, // 4: com.seed.daemon.v1alpha.DeviceLinkSession.redeem_time:type_name -> google.protobuf.Timestamp
	0,  // 5: com.seed.daemon.v1alpha.Info.state:type_name -> com.seed.daemon.v1alpha.State
	20, // 6: com.seed.daemon.v1alpha.Info.start_time:type_name -> google.protobuf.Timestamp
	1,  // 7: com.seed.daemon.v1alpha.Daemon.GenMnemonic:input_type -> com.seed.daemon.v1alpha.GenMnemonicRequest
	3,  // 8: com.seed.daemon.v1alpha.Daemon.RegisterKey:input_type -> com.seed.daemon.v1alpha.RegisterKeyRequest
	4,  // 9: com.seed.daemon.v1alpha.Daemon.GetInfo:input_type -> com.seed.daemon.v1alpha.GetInfoRequest
	5,  // 10: com.seed.daemon.v1alpha.Daemon.ForceSync:input_type -> com.seed.daemon.v1alpha.ForceSyncRequest
	7,  // 11: com.seed.daemon.v1alpha.Daemon.ListKeys:input_type -> com.seed.daemon.v1alpha.ListKeysRequest
	9,  // 12: com.seed.daemon.v1alpha.Daemon.UpdateKey:input_type -> com.seed.daemon.v1alpha.UpdateKeyRequest
	10, // 13: com.seed.daemon.v1alpha.Daemon.DeleteKey:input_type -> com.seed.daemon.v1alpha.DeleteKeyRequest
	6,  // 14: com.seed.daemon.v1alpha.Daemon.DeleteAllKeys:input_type -> com.seed.daemon.v1alpha.DeleteAllKeysRequest
	11, // 15: com.seed.daemon.v1alpha.Daemon.StoreBlobs:input_type -> com.seed.daemon.v1alpha.StoreBlobsRequest
	13, // 16: com.seed.daemon.v1alpha.Daemon.CreateDeviceLinkSession:input_type -> com.seed.daemon.v1alpha.CreateDeviceLinkSessionRequest
	14, // 17: com.seed.daemon.v1alpha.Daemon.GetDeviceLinkSession:input_type -> com.seed.daemon.v1alpha.GetDeviceLinkSessionRequest
	2,  // 18: com.seed.daemon.v1alpha.Daemon.GenMnemonic:output_type -> com.seed.daemon.v1alpha.GenMnemonicResponse
	19, // 19: com.seed.daemon.v1alpha.Daemon.RegisterKey:output_type -> com.seed.daemon.v1alpha.NamedKey
	18, // 20: com.seed.daemon.v1alpha.Daemon.GetInfo:output_type -> com.seed.daemon.v1alpha.Info
	21, // 21: com.seed.daemon.v1alpha.Daemon.ForceSync:output_type -> google.protobuf.Empty
	8,  // 22: com.seed.daemon.v1alpha.Daemon.ListKeys:output_type -> com.seed.daemon.v1alpha.ListKeysResponse
	19, // 23: com.seed.daemon.v1alpha.Daemon.UpdateKey:output_type -> com.seed.daemon.v1alpha.NamedKey
	21, // 24: com.seed.daemon.v1alpha.Daemon.DeleteKey:output_type -> google.protobuf.Empty
	21, // 25: com.seed.daemon.v1alpha.Daemon.DeleteAllKeys:output_type -> google.protobuf.Empty
	12, // 26: com.seed.daemon.v1alpha.Daemon.StoreBlobs:output_type -> com.seed.daemon.v1alpha.StoreBlobsResponse
	15, // 27: com.seed.daemon.v1alpha.Daemon.CreateDeviceLinkSession:output_type -> com.seed.daemon.v1alpha.DeviceLinkSession
	15, // 28: com.seed.daemon.v1alpha.Daemon.GetDeviceLinkSession:output_type -> com.seed.daemon.v1alpha.DeviceLinkSession
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_daemon_v1alpha_daemon_proto_init() }
func file_daemon_v1alpha_daemon_proto_init() {
	if File_daemon_v1alpha_daemon_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_daemon_v1alpha_daemon_proto_rawDesc), len(file_daemon_v1alpha_daemon_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_daemon_v1alpha_daemon_proto_goTypes,
		DependencyIndexes: file_daemon_v1alpha_daemon_proto_depIdxs,
		EnumInfos:         file_daemon_v1alpha_daemon_proto_enumTypes,
		MessageInfos:      file_daemon_v1alpha_daemon_proto_msgTypes,
	}.Build()
	File_daemon_v1alpha_daemon_proto = out.File
	file_daemon_v1alpha_daemon_proto_goTypes = nil
	file_daemon_v1alpha_daemon_proto_depIdxs = nil
}
