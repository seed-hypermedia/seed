// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.24.4
// source: activity/v1alpha/activity.proto

package activity

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request to list the events.
type ListEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The size of the page. The default is defined by the server.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. The page token for requesting next pages.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. If we want events from trusted peers only. All peers by default.
	TrustedOnly bool `protobuf:"varint,3,opt,name=trusted_only,json=trustedOnly,proto3" json:"trusted_only,omitempty"`
	// Optional. If we want events only from specific user accounts. Multiple
	// authors are filtered following OR logic.
	FilterAuthors []string `protobuf:"bytes,4,rep,name=filter_authors,json=filterAuthors,proto3" json:"filter_authors,omitempty"`
	// Optional. If we want certain types of events.
	// Currently supported event types are:
	//   - Ref: any document change
	//   - Capability: obvious
	//   - Comment: obvious
	//   - DagPB:
	//   - Profile:
	//   - Contact: create a contact for a specific resource
	//
	// Multiple types are filtered following OR logic.
	FilterEventType []string `protobuf:"bytes,5,rep,name=filter_event_type,json=filterEventType,proto3" json:"filter_event_type,omitempty"`
	// Optional. If we want events only from specific resource IDs.
	// It admits wildards, i.e. we can filter by path prefixes.
	FilterResource string `protobuf:"bytes,6,opt,name=filter_resource,json=filterResource,proto3" json:"filter_resource,omitempty"`
	// Optional. If we want to include link events. These blobs (usually documents
	// or comments), link (mention) to another resource (currently only account
	// mentions supported). We can add these blobs to the feed result by providing a
	// list of resources iris we want links to aggregated as a logical OR.
	// These link events are also treated as logical OR when grouped with other filters,
	// unlike other filters (authors, event_types) that are grouped under a logic AND.
	// Example: filter_authors(u+a1 OR a2 ...) AND filter_event_type(et1 OR et2 ...) OR
	// add_linked_resource(lr1 OR lr2 ...)
	AddLinkedResource []string `protobuf:"bytes,7,rep,name=add_linked_resource,json=addLinkedResource,proto3" json:"add_linked_resource,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	mi := &file_activity_v1alpha_activity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1alpha_activity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_activity_v1alpha_activity_proto_rawDescGZIP(), []int{0}
}

func (x *ListEventsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEventsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEventsRequest) GetTrustedOnly() bool {
	if x != nil {
		return x.TrustedOnly
	}
	return false
}

func (x *ListEventsRequest) GetFilterAuthors() []string {
	if x != nil {
		return x.FilterAuthors
	}
	return nil
}

func (x *ListEventsRequest) GetFilterEventType() []string {
	if x != nil {
		return x.FilterEventType
	}
	return nil
}

func (x *ListEventsRequest) GetFilterResource() string {
	if x != nil {
		return x.FilterResource
	}
	return ""
}

func (x *ListEventsRequest) GetAddLinkedResource() []string {
	if x != nil {
		return x.AddLinkedResource
	}
	return nil
}

// The response with the list of events.
type ListEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of events.
	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// The token to request the next page.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventsResponse) Reset() {
	*x = ListEventsResponse{}
	mi := &file_activity_v1alpha_activity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsResponse) ProtoMessage() {}

func (x *ListEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1alpha_activity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsResponse.ProtoReflect.Descriptor instead.
func (*ListEventsResponse) Descriptor() ([]byte, []int) {
	return file_activity_v1alpha_activity_proto_rawDescGZIP(), []int{1}
}

func (x *ListEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ListEventsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Description of the event occurred in the system.
type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Union type of different event types.
	// Eventually we'll have more event types.
	//
	// Types that are valid to be assigned to Data:
	//
	//	*Event_NewBlob
	Data isEvent_Data `protobuf_oneof:"data"`
	// The ID of the user account that has caused the event.
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// Timestamp of the event as per the event itself.
	EventTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Locally perceived time of the event.
	// I.e. time when we have received the event on our machine.
	ObserveTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=observe_time,json=observeTime,proto3" json:"observe_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_activity_v1alpha_activity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1alpha_activity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_activity_v1alpha_activity_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetData() isEvent_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetNewBlob() *NewBlobEvent {
	if x != nil {
		if x, ok := x.Data.(*Event_NewBlob); ok {
			return x.NewBlob
		}
	}
	return nil
}

func (x *Event) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Event) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *Event) GetObserveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ObserveTime
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_NewBlob struct {
	// Event type describing the appearance of a new blob in the system.
	NewBlob *NewBlobEvent `protobuf:"bytes,1,opt,name=new_blob,json=newBlob,proto3,oneof"`
}

func (*Event_NewBlob) isEvent_Data() {}

// The event describing the
type NewBlobEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CID of the blob that was created.
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// The type of the blob that was created.
	// Defined as string for extensibility.
	// Some of the currently supported blob types are:
	//   - KeyDelegation
	//   - Change
	//   - Comment
	//   - DagPB
	BlobType string `protobuf:"bytes,2,opt,name=blob_type,json=blobType,proto3" json:"blob_type,omitempty"`
	// The user account ID that has created the blob.
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// The resource ID that the blob is related to.
	Resource string `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// Extra attributes of the blob.
	ExtraAttrs string `protobuf:"bytes,5,opt,name=extra_attrs,json=extraAttrs,proto3" json:"extra_attrs,omitempty"`
	BlobId     int64  `protobuf:"varint,6,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
	// Only relevant for ling events
	IsPinned      bool `protobuf:"varint,7,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewBlobEvent) Reset() {
	*x = NewBlobEvent{}
	mi := &file_activity_v1alpha_activity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewBlobEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlobEvent) ProtoMessage() {}

func (x *NewBlobEvent) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1alpha_activity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlobEvent.ProtoReflect.Descriptor instead.
func (*NewBlobEvent) Descriptor() ([]byte, []int) {
	return file_activity_v1alpha_activity_proto_rawDescGZIP(), []int{3}
}

func (x *NewBlobEvent) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *NewBlobEvent) GetBlobType() string {
	if x != nil {
		return x.BlobType
	}
	return ""
}

func (x *NewBlobEvent) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NewBlobEvent) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *NewBlobEvent) GetExtraAttrs() string {
	if x != nil {
		return x.ExtraAttrs
	}
	return ""
}

func (x *NewBlobEvent) GetBlobId() int64 {
	if x != nil {
		return x.BlobId
	}
	return 0
}

func (x *NewBlobEvent) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

var File_activity_v1alpha_activity_proto protoreflect.FileDescriptor

const file_activity_v1alpha_activity_proto_rawDesc = "" +
	"\n" +
	"\x1factivity/v1alpha/activity.proto\x12\x19com.seed.activity.v1alpha\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9e\x02\n" +
	"\x11ListEventsRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12!\n" +
	"\ftrusted_only\x18\x03 \x01(\bR\vtrustedOnly\x12%\n" +
	"\x0efilter_authors\x18\x04 \x03(\tR\rfilterAuthors\x12*\n" +
	"\x11filter_event_type\x18\x05 \x03(\tR\x0ffilterEventType\x12'\n" +
	"\x0ffilter_resource\x18\x06 \x01(\tR\x0efilterResource\x12.\n" +
	"\x13add_linked_resource\x18\a \x03(\tR\x11addLinkedResource\"v\n" +
	"\x12ListEventsResponse\x128\n" +
	"\x06events\x18\x01 \x03(\v2 .com.seed.activity.v1alpha.EventR\x06events\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xe9\x01\n" +
	"\x05Event\x12D\n" +
	"\bnew_blob\x18\x01 \x01(\v2'.com.seed.activity.v1alpha.NewBlobEventH\x00R\anewBlob\x12\x18\n" +
	"\aaccount\x18\x02 \x01(\tR\aaccount\x129\n" +
	"\n" +
	"event_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\teventTime\x12=\n" +
	"\fobserve_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vobserveTimeB\x06\n" +
	"\x04data\"\xc8\x01\n" +
	"\fNewBlobEvent\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\x12\x1b\n" +
	"\tblob_type\x18\x02 \x01(\tR\bblobType\x12\x16\n" +
	"\x06author\x18\x03 \x01(\tR\x06author\x12\x1a\n" +
	"\bresource\x18\x04 \x01(\tR\bresource\x12\x1f\n" +
	"\vextra_attrs\x18\x05 \x01(\tR\n" +
	"extraAttrs\x12\x17\n" +
	"\ablob_id\x18\x06 \x01(\x03R\x06blobId\x12\x1b\n" +
	"\tis_pinned\x18\a \x01(\bR\bisPinned2y\n" +
	"\fActivityFeed\x12i\n" +
	"\n" +
	"ListEvents\x12,.com.seed.activity.v1alpha.ListEventsRequest\x1a-.com.seed.activity.v1alpha.ListEventsResponseB1Z/seed/backend/genproto/activity/v1alpha;activityb\x06proto3"

var (
	file_activity_v1alpha_activity_proto_rawDescOnce sync.Once
	file_activity_v1alpha_activity_proto_rawDescData []byte
)

func file_activity_v1alpha_activity_proto_rawDescGZIP() []byte {
	file_activity_v1alpha_activity_proto_rawDescOnce.Do(func() {
		file_activity_v1alpha_activity_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_activity_v1alpha_activity_proto_rawDesc), len(file_activity_v1alpha_activity_proto_rawDesc)))
	})
	return file_activity_v1alpha_activity_proto_rawDescData
}

var file_activity_v1alpha_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_activity_v1alpha_activity_proto_goTypes = []any{
	(*ListEventsRequest)(nil),     // 0: com.seed.activity.v1alpha.ListEventsRequest
	(*ListEventsResponse)(nil),    // 1: com.seed.activity.v1alpha.ListEventsResponse
	(*Event)(nil),                 // 2: com.seed.activity.v1alpha.Event
	(*NewBlobEvent)(nil),          // 3: com.seed.activity.v1alpha.NewBlobEvent
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_activity_v1alpha_activity_proto_depIdxs = []int32{
	2, // 0: com.seed.activity.v1alpha.ListEventsResponse.events:type_name -> com.seed.activity.v1alpha.Event
	3, // 1: com.seed.activity.v1alpha.Event.new_blob:type_name -> com.seed.activity.v1alpha.NewBlobEvent
	4, // 2: com.seed.activity.v1alpha.Event.event_time:type_name -> google.protobuf.Timestamp
	4, // 3: com.seed.activity.v1alpha.Event.observe_time:type_name -> google.protobuf.Timestamp
	0, // 4: com.seed.activity.v1alpha.ActivityFeed.ListEvents:input_type -> com.seed.activity.v1alpha.ListEventsRequest
	1, // 5: com.seed.activity.v1alpha.ActivityFeed.ListEvents:output_type -> com.seed.activity.v1alpha.ListEventsResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_activity_v1alpha_activity_proto_init() }
func file_activity_v1alpha_activity_proto_init() {
	if File_activity_v1alpha_activity_proto != nil {
		return
	}
	file_activity_v1alpha_activity_proto_msgTypes[2].OneofWrappers = []any{
		(*Event_NewBlob)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_activity_v1alpha_activity_proto_rawDesc), len(file_activity_v1alpha_activity_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_activity_v1alpha_activity_proto_goTypes,
		DependencyIndexes: file_activity_v1alpha_activity_proto_depIdxs,
		MessageInfos:      file_activity_v1alpha_activity_proto_msgTypes,
	}.Build()
	File_activity_v1alpha_activity_proto = out.File
	file_activity_v1alpha_activity_proto_goTypes = nil
	file_activity_v1alpha_activity_proto_depIdxs = nil
}
