// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: payments/v1alpha/invoices.proto

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvoicesClient is the client API for Invoices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoicesClient interface {
	// CreateInvoice creates a local invoice. Used to get paid. Typicaly
	// seed users will call this remotely bc they don't know the lnaddress
	// of the receiver, just their seed account. The local node, upon the
	// request, issues an invoice.
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*Payreq, error)
	// PayInvoice Pays a bolt11 invoice.
	PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PayInvoice Pays a bolt11 invoice.
	ListPaidInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	// PayInvoice Pays a bolt11 invoice.
	ListReceivednvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
}

type invoicesClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicesClient(cc grpc.ClientConnInterface) InvoicesClient {
	return &invoicesClient{cc}
}

func (c *invoicesClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*Payreq, error) {
	out := new(Payreq)
	err := c.cc.Invoke(ctx, "/com.seed.payments.v1alpha.Invoices/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.seed.payments.v1alpha.Invoices/PayInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) ListPaidInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, "/com.seed.payments.v1alpha.Invoices/ListPaidInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicesClient) ListReceivednvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, "/com.seed.payments.v1alpha.Invoices/ListReceivednvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoicesServer is the server API for Invoices service.
// All implementations should embed UnimplementedInvoicesServer
// for forward compatibility
type InvoicesServer interface {
	// CreateInvoice creates a local invoice. Used to get paid. Typicaly
	// seed users will call this remotely bc they don't know the lnaddress
	// of the receiver, just their seed account. The local node, upon the
	// request, issues an invoice.
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*Payreq, error)
	// PayInvoice Pays a bolt11 invoice.
	PayInvoice(context.Context, *PayInvoiceRequest) (*emptypb.Empty, error)
	// PayInvoice Pays a bolt11 invoice.
	ListPaidInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	// PayInvoice Pays a bolt11 invoice.
	ListReceivednvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
}

// UnimplementedInvoicesServer should be embedded to have forward compatible implementations.
type UnimplementedInvoicesServer struct {
}

func (UnimplementedInvoicesServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*Payreq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedInvoicesServer) PayInvoice(context.Context, *PayInvoiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayInvoice not implemented")
}
func (UnimplementedInvoicesServer) ListPaidInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaidInvoices not implemented")
}
func (UnimplementedInvoicesServer) ListReceivednvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivednvoices not implemented")
}

// UnsafeInvoicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoicesServer will
// result in compilation errors.
type UnsafeInvoicesServer interface {
	mustEmbedUnimplementedInvoicesServer()
}

func RegisterInvoicesServer(s grpc.ServiceRegistrar, srv InvoicesServer) {
	s.RegisterService(&Invoices_ServiceDesc, srv)
}

func _Invoices_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.payments.v1alpha.Invoices/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_PayInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).PayInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.payments.v1alpha.Invoices/PayInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).PayInvoice(ctx, req.(*PayInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_ListPaidInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).ListPaidInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.payments.v1alpha.Invoices/ListPaidInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).ListPaidInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoices_ListReceivednvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicesServer).ListReceivednvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.payments.v1alpha.Invoices/ListReceivednvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicesServer).ListReceivednvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invoices_ServiceDesc is the grpc.ServiceDesc for Invoices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invoices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.payments.v1alpha.Invoices",
	HandlerType: (*InvoicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _Invoices_CreateInvoice_Handler,
		},
		{
			MethodName: "PayInvoice",
			Handler:    _Invoices_PayInvoice_Handler,
		},
		{
			MethodName: "ListPaidInvoices",
			Handler:    _Invoices_ListPaidInvoices_Handler,
		},
		{
			MethodName: "ListReceivednvoices",
			Handler:    _Invoices_ListReceivednvoices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments/v1alpha/invoices.proto",
}

// LNURLClient is the client API for LNURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LNURLClient interface {
	// Request an invoice following the LNURL lud6 protocol
	// (https://github.com/lnurl/luds/blob/luds/06.md). This does not require the
	// caller to log in anywhere. Used to pay.
	RequestLud6Invoice(ctx context.Context, in *RequestLud6InvoiceRequest, opts ...grpc.CallOption) (*Payreq, error)
	// GetLnAddress gets the lnaddress (https://lightningaddress.com/) associated
	// with a wallet. Not all wallets are lnaddress compatible.
	GetLnAddress(ctx context.Context, in *GetLnAddressRequest, opts ...grpc.CallOption) (*LNAddress, error)
	// UpdateLNAddress change the lnaddress of a specific wallet.
	// LNaddress must be globally unique (like email addresses).
	UpdateLNAddress(ctx context.Context, in *UpdateLNAddressRequest, opts ...grpc.CallOption) (*LNAddress, error)
}

type lNURLClient struct {
	cc grpc.ClientConnInterface
}

func NewLNURLClient(cc grpc.ClientConnInterface) LNURLClient {
	return &lNURLClient{cc}
}

func (c *lNURLClient) RequestLud6Invoice(ctx context.Context, in *RequestLud6InvoiceRequest, opts ...grpc.CallOption) (*Payreq, error) {
	out := new(Payreq)
	err := c.cc.Invoke(ctx, "/com.seed.payments.v1alpha.LNURL/RequestLud6Invoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lNURLClient) GetLnAddress(ctx context.Context, in *GetLnAddressRequest, opts ...grpc.CallOption) (*LNAddress, error) {
	out := new(LNAddress)
	err := c.cc.Invoke(ctx, "/com.seed.payments.v1alpha.LNURL/GetLnAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lNURLClient) UpdateLNAddress(ctx context.Context, in *UpdateLNAddressRequest, opts ...grpc.CallOption) (*LNAddress, error) {
	out := new(LNAddress)
	err := c.cc.Invoke(ctx, "/com.seed.payments.v1alpha.LNURL/UpdateLNAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LNURLServer is the server API for LNURL service.
// All implementations should embed UnimplementedLNURLServer
// for forward compatibility
type LNURLServer interface {
	// Request an invoice following the LNURL lud6 protocol
	// (https://github.com/lnurl/luds/blob/luds/06.md). This does not require the
	// caller to log in anywhere. Used to pay.
	RequestLud6Invoice(context.Context, *RequestLud6InvoiceRequest) (*Payreq, error)
	// GetLnAddress gets the lnaddress (https://lightningaddress.com/) associated
	// with a wallet. Not all wallets are lnaddress compatible.
	GetLnAddress(context.Context, *GetLnAddressRequest) (*LNAddress, error)
	// UpdateLNAddress change the lnaddress of a specific wallet.
	// LNaddress must be globally unique (like email addresses).
	UpdateLNAddress(context.Context, *UpdateLNAddressRequest) (*LNAddress, error)
}

// UnimplementedLNURLServer should be embedded to have forward compatible implementations.
type UnimplementedLNURLServer struct {
}

func (UnimplementedLNURLServer) RequestLud6Invoice(context.Context, *RequestLud6InvoiceRequest) (*Payreq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLud6Invoice not implemented")
}
func (UnimplementedLNURLServer) GetLnAddress(context.Context, *GetLnAddressRequest) (*LNAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLnAddress not implemented")
}
func (UnimplementedLNURLServer) UpdateLNAddress(context.Context, *UpdateLNAddressRequest) (*LNAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLNAddress not implemented")
}

// UnsafeLNURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LNURLServer will
// result in compilation errors.
type UnsafeLNURLServer interface {
	mustEmbedUnimplementedLNURLServer()
}

func RegisterLNURLServer(s grpc.ServiceRegistrar, srv LNURLServer) {
	s.RegisterService(&LNURL_ServiceDesc, srv)
}

func _LNURL_RequestLud6Invoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLud6InvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LNURLServer).RequestLud6Invoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.payments.v1alpha.LNURL/RequestLud6Invoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LNURLServer).RequestLud6Invoice(ctx, req.(*RequestLud6InvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LNURL_GetLnAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLnAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LNURLServer).GetLnAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.payments.v1alpha.LNURL/GetLnAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LNURLServer).GetLnAddress(ctx, req.(*GetLnAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LNURL_UpdateLNAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLNAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LNURLServer).UpdateLNAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.payments.v1alpha.LNURL/UpdateLNAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LNURLServer).UpdateLNAddress(ctx, req.(*UpdateLNAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LNURL_ServiceDesc is the grpc.ServiceDesc for LNURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LNURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.payments.v1alpha.LNURL",
	HandlerType: (*LNURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestLud6Invoice",
			Handler:    _LNURL_RequestLud6Invoice_Handler,
		},
		{
			MethodName: "GetLnAddress",
			Handler:    _LNURL_GetLnAddress_Handler,
		},
		{
			MethodName: "UpdateLNAddress",
			Handler:    _LNURL_UpdateLNAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments/v1alpha/invoices.proto",
}
