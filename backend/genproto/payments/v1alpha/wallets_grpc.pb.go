// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: payments/v1alpha/wallets.proto

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Wallets_CreateWallet_FullMethodName     = "/com.seed.payments.v1alpha.Wallets/CreateWallet"
	Wallets_RemoveWallet_FullMethodName     = "/com.seed.payments.v1alpha.Wallets/RemoveWallet"
	Wallets_ImportWallet_FullMethodName     = "/com.seed.payments.v1alpha.Wallets/ImportWallet"
	Wallets_ExportWallet_FullMethodName     = "/com.seed.payments.v1alpha.Wallets/ExportWallet"
	Wallets_GetWalletBalance_FullMethodName = "/com.seed.payments.v1alpha.Wallets/GetWalletBalance"
	Wallets_ListWallets_FullMethodName      = "/com.seed.payments.v1alpha.Wallets/ListWallets"
	Wallets_GetWallet_FullMethodName        = "/com.seed.payments.v1alpha.Wallets/GetWallet"
	Wallets_UpdateWalletName_FullMethodName = "/com.seed.payments.v1alpha.Wallets/UpdateWalletName"
	Wallets_GetDefaultWallet_FullMethodName = "/com.seed.payments.v1alpha.Wallets/GetDefaultWallet"
	Wallets_SetDefaultWallet_FullMethodName = "/com.seed.payments.v1alpha.Wallets/SetDefaultWallet"
)

// WalletsClient is the client API for Wallets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletsClient interface {
	// CreateWallet Created a seed wallet based on mnemonics.
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// RemoveWallet deletes a wallet locally. It can be later imported
	// with the necessary credentials and no funds will be lost.
	RemoveWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ImportWallet Imports a 3rd party (compatible) wallet with credentials.
	ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// ExportWallet Export the wallet credentials so they can be imported and
	// used with a 3rd party compatible app.
	ExportWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*ExportWalletResponse, error)
	// ListWallets lists all available wallets for the account.
	GetWalletBalance(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error)
	// ListWallets lists all available wallets for the account.
	ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	// GetWallet gets a specific wallet.
	GetWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// UpdateWalletName changes the name of the wallet. This does not have any
	// implications on payments. Name is just for user convenience.
	UpdateWalletName(ctx context.Context, in *UpdateWalletNameRequest, opts ...grpc.CallOption) (*Wallet, error)
	// GetDefaultWallet returns the default wallet where payments are going
	// to be collected at. Also, this wallet will be used to make payments.
	GetDefaultWallet(ctx context.Context, in *GetDefaultWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// SetDefaultWallet changes the default wallet where payments are going
	// to be collected at. Also, this wallet will be used to make payments.
	SetDefaultWallet(ctx context.Context, in *SetDefaultWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
}

type walletsClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletsClient(cc grpc.ClientConnInterface) WalletsClient {
	return &walletsClient{cc}
}

func (c *walletsClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Wallets_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) RemoveWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Wallets_RemoveWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Wallets_ImportWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) ExportWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*ExportWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportWalletResponse)
	err := c.cc.Invoke(ctx, Wallets_ExportWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) GetWalletBalance(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletBalanceResponse)
	err := c.cc.Invoke(ctx, Wallets_GetWalletBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, Wallets_ListWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) GetWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Wallets_GetWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) UpdateWalletName(ctx context.Context, in *UpdateWalletNameRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Wallets_UpdateWalletName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) GetDefaultWallet(ctx context.Context, in *GetDefaultWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Wallets_GetDefaultWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletsClient) SetDefaultWallet(ctx context.Context, in *SetDefaultWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, Wallets_SetDefaultWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletsServer is the server API for Wallets service.
// All implementations should embed UnimplementedWalletsServer
// for forward compatibility.
type WalletsServer interface {
	// CreateWallet Created a seed wallet based on mnemonics.
	CreateWallet(context.Context, *CreateWalletRequest) (*Wallet, error)
	// RemoveWallet deletes a wallet locally. It can be later imported
	// with the necessary credentials and no funds will be lost.
	RemoveWallet(context.Context, *WalletRequest) (*emptypb.Empty, error)
	// ImportWallet Imports a 3rd party (compatible) wallet with credentials.
	ImportWallet(context.Context, *ImportWalletRequest) (*Wallet, error)
	// ExportWallet Export the wallet credentials so they can be imported and
	// used with a 3rd party compatible app.
	ExportWallet(context.Context, *WalletRequest) (*ExportWalletResponse, error)
	// ListWallets lists all available wallets for the account.
	GetWalletBalance(context.Context, *WalletRequest) (*GetWalletBalanceResponse, error)
	// ListWallets lists all available wallets for the account.
	ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error)
	// GetWallet gets a specific wallet.
	GetWallet(context.Context, *WalletRequest) (*Wallet, error)
	// UpdateWalletName changes the name of the wallet. This does not have any
	// implications on payments. Name is just for user convenience.
	UpdateWalletName(context.Context, *UpdateWalletNameRequest) (*Wallet, error)
	// GetDefaultWallet returns the default wallet where payments are going
	// to be collected at. Also, this wallet will be used to make payments.
	GetDefaultWallet(context.Context, *GetDefaultWalletRequest) (*Wallet, error)
	// SetDefaultWallet changes the default wallet where payments are going
	// to be collected at. Also, this wallet will be used to make payments.
	SetDefaultWallet(context.Context, *SetDefaultWalletRequest) (*Wallet, error)
}

// UnimplementedWalletsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletsServer struct{}

func (UnimplementedWalletsServer) CreateWallet(context.Context, *CreateWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletsServer) RemoveWallet(context.Context, *WalletRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWallet not implemented")
}
func (UnimplementedWalletsServer) ImportWallet(context.Context, *ImportWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWallet not implemented")
}
func (UnimplementedWalletsServer) ExportWallet(context.Context, *WalletRequest) (*ExportWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportWallet not implemented")
}
func (UnimplementedWalletsServer) GetWalletBalance(context.Context, *WalletRequest) (*GetWalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalance not implemented")
}
func (UnimplementedWalletsServer) ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (UnimplementedWalletsServer) GetWallet(context.Context, *WalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedWalletsServer) UpdateWalletName(context.Context, *UpdateWalletNameRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletName not implemented")
}
func (UnimplementedWalletsServer) GetDefaultWallet(context.Context, *GetDefaultWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultWallet not implemented")
}
func (UnimplementedWalletsServer) SetDefaultWallet(context.Context, *SetDefaultWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultWallet not implemented")
}
func (UnimplementedWalletsServer) testEmbeddedByValue() {}

// UnsafeWalletsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletsServer will
// result in compilation errors.
type UnsafeWalletsServer interface {
	mustEmbedUnimplementedWalletsServer()
}

func RegisterWalletsServer(s grpc.ServiceRegistrar, srv WalletsServer) {
	// If the following call pancis, it indicates UnimplementedWalletsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Wallets_ServiceDesc, srv)
}

func _Wallets_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_RemoveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).RemoveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_RemoveWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).RemoveWallet(ctx, req.(*WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_ImportWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).ImportWallet(ctx, req.(*ImportWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_ExportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).ExportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_ExportWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).ExportWallet(ctx, req.(*WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_GetWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).GetWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_GetWalletBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).GetWalletBalance(ctx, req.(*WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_ListWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).ListWallets(ctx, req.(*ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_GetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).GetWallet(ctx, req.(*WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_UpdateWalletName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).UpdateWalletName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_UpdateWalletName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).UpdateWalletName(ctx, req.(*UpdateWalletNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_GetDefaultWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).GetDefaultWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_GetDefaultWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).GetDefaultWallet(ctx, req.(*GetDefaultWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallets_SetDefaultWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletsServer).SetDefaultWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallets_SetDefaultWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletsServer).SetDefaultWallet(ctx, req.(*SetDefaultWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallets_ServiceDesc is the grpc.ServiceDesc for Wallets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.payments.v1alpha.Wallets",
	HandlerType: (*WalletsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _Wallets_CreateWallet_Handler,
		},
		{
			MethodName: "RemoveWallet",
			Handler:    _Wallets_RemoveWallet_Handler,
		},
		{
			MethodName: "ImportWallet",
			Handler:    _Wallets_ImportWallet_Handler,
		},
		{
			MethodName: "ExportWallet",
			Handler:    _Wallets_ExportWallet_Handler,
		},
		{
			MethodName: "GetWalletBalance",
			Handler:    _Wallets_GetWalletBalance_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _Wallets_ListWallets_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _Wallets_GetWallet_Handler,
		},
		{
			MethodName: "UpdateWalletName",
			Handler:    _Wallets_UpdateWalletName_Handler,
		},
		{
			MethodName: "GetDefaultWallet",
			Handler:    _Wallets_GetDefaultWallet_Handler,
		},
		{
			MethodName: "SetDefaultWallet",
			Handler:    _Wallets_SetDefaultWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments/v1alpha/wallets.proto",
}
