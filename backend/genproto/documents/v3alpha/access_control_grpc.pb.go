// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: documents/v3alpha/access_control.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessControlClient is the client API for AccessControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessControlClient interface {
	// Lists existing capabilities.
	ListCapabilities(ctx context.Context, in *ListCapabilitiesRequest, opts ...grpc.CallOption) (*ListCapabilitiesResponse, error)
	// Creates a new capability.
	CreateCapability(ctx context.Context, in *CreateCapabilityRequest, opts ...grpc.CallOption) (*Capability, error)
	// Get a single capability by ID.
	GetCapability(ctx context.Context, in *GetCapabilityRequest, opts ...grpc.CallOption) (*Capability, error)
}

type accessControlClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessControlClient(cc grpc.ClientConnInterface) AccessControlClient {
	return &accessControlClient{cc}
}

func (c *accessControlClient) ListCapabilities(ctx context.Context, in *ListCapabilitiesRequest, opts ...grpc.CallOption) (*ListCapabilitiesResponse, error) {
	out := new(ListCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v3alpha.AccessControl/ListCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) CreateCapability(ctx context.Context, in *CreateCapabilityRequest, opts ...grpc.CallOption) (*Capability, error) {
	out := new(Capability)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v3alpha.AccessControl/CreateCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) GetCapability(ctx context.Context, in *GetCapabilityRequest, opts ...grpc.CallOption) (*Capability, error) {
	out := new(Capability)
	err := c.cc.Invoke(ctx, "/com.seed.documents.v3alpha.AccessControl/GetCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlServer is the server API for AccessControl service.
// All implementations should embed UnimplementedAccessControlServer
// for forward compatibility
type AccessControlServer interface {
	// Lists existing capabilities.
	ListCapabilities(context.Context, *ListCapabilitiesRequest) (*ListCapabilitiesResponse, error)
	// Creates a new capability.
	CreateCapability(context.Context, *CreateCapabilityRequest) (*Capability, error)
	// Get a single capability by ID.
	GetCapability(context.Context, *GetCapabilityRequest) (*Capability, error)
}

// UnimplementedAccessControlServer should be embedded to have forward compatible implementations.
type UnimplementedAccessControlServer struct {
}

func (UnimplementedAccessControlServer) ListCapabilities(context.Context, *ListCapabilitiesRequest) (*ListCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCapabilities not implemented")
}
func (UnimplementedAccessControlServer) CreateCapability(context.Context, *CreateCapabilityRequest) (*Capability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCapability not implemented")
}
func (UnimplementedAccessControlServer) GetCapability(context.Context, *GetCapabilityRequest) (*Capability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapability not implemented")
}

// UnsafeAccessControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessControlServer will
// result in compilation errors.
type UnsafeAccessControlServer interface {
	mustEmbedUnimplementedAccessControlServer()
}

func RegisterAccessControlServer(s grpc.ServiceRegistrar, srv AccessControlServer) {
	s.RegisterService(&AccessControl_ServiceDesc, srv)
}

func _AccessControl_ListCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).ListCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v3alpha.AccessControl/ListCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).ListCapabilities(ctx, req.(*ListCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_CreateCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).CreateCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v3alpha.AccessControl/CreateCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).CreateCapability(ctx, req.(*CreateCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_GetCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).GetCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.documents.v3alpha.AccessControl/GetCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).GetCapability(ctx, req.(*GetCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessControl_ServiceDesc is the grpc.ServiceDesc for AccessControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.documents.v3alpha.AccessControl",
	HandlerType: (*AccessControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCapabilities",
			Handler:    _AccessControl_ListCapabilities_Handler,
		},
		{
			MethodName: "CreateCapability",
			Handler:    _AccessControl_CreateCapability_Handler,
		},
		{
			MethodName: "GetCapability",
			Handler:    _AccessControl_GetCapability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/v3alpha/access_control.proto",
}
