// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.24.4
// source: p2p/v1alpha/p2p.proto

package p2p

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates connection status of our node with a remote peer.
// Mimics libp2p connectedness.
type ConnectionStatus int32

const (
	// NotConnected means no connection to peer, and no extra information (default).
	ConnectionStatus_NOT_CONNECTED ConnectionStatus = 0
	// Connected means has an open, live connection to peer.
	ConnectionStatus_CONNECTED ConnectionStatus = 1
	// CanConnect means recently connected to peer, terminated gracefully.
	ConnectionStatus_CAN_CONNECT ConnectionStatus = 2
	// CannotConnect means recently attempted connecting but failed to connect.
	// (should signal "made effort, failed").
	ConnectionStatus_CANNOT_CONNECT ConnectionStatus = 3
	// Limited means we have a transient connection to the peer, but aren't fully connected.
	ConnectionStatus_LIMITED ConnectionStatus = 4
)

// Enum value maps for ConnectionStatus.
var (
	ConnectionStatus_name = map[int32]string{
		0: "NOT_CONNECTED",
		1: "CONNECTED",
		2: "CAN_CONNECT",
		3: "CANNOT_CONNECT",
		4: "LIMITED",
	}
	ConnectionStatus_value = map[string]int32{
		"NOT_CONNECTED":  0,
		"CONNECTED":      1,
		"CAN_CONNECT":    2,
		"CANNOT_CONNECT": 3,
		"LIMITED":        4,
	}
)

func (x ConnectionStatus) Enum() *ConnectionStatus {
	p := new(ConnectionStatus)
	*p = x
	return p
}

func (x ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_v1alpha_p2p_proto_enumTypes[0].Descriptor()
}

func (ConnectionStatus) Type() protoreflect.EnumType {
	return &file_p2p_v1alpha_p2p_proto_enumTypes[0]
}

func (x ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionStatus.Descriptor instead.
func (ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{0}
}

// Request to list blobs.
type ListBlobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A cursor obtained from a previous request to resume the stream.
	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ListBlobsRequest) Reset() {
	*x = ListBlobsRequest{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlobsRequest) ProtoMessage() {}

func (x *ListBlobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlobsRequest.ProtoReflect.Descriptor instead.
func (*ListBlobsRequest) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *ListBlobsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Request to list te peer list.
type ListPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Maximum number of peers to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. Page token to continue listing peers from.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Hash of the local peer list to reconciliate.
	ListHash string `protobuf:"bytes,3,opt,name=list_hash,json=listHash,proto3" json:"list_hash,omitempty"`
}

func (x *ListPeersRequest) Reset() {
	*x = ListPeersRequest{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeersRequest) ProtoMessage() {}

func (x *ListPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeersRequest.ProtoReflect.Descriptor instead.
func (*ListPeersRequest) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *ListPeersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPeersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPeersRequest) GetListHash() string {
	if x != nil {
		return x.ListHash
	}
	return ""
}

// Request to list spaces.
type ListSpacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many items to return in the response.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to continue listing spaces from.
	// Sometimes, the server may decide that previously generated tokens are invalid,
	// and return the results from the beginning, as if no token was provided.
	// Callers should deduplicate the responses themselves if necessary, and always treat
	// the returned page tokens as the only source of truth.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSpacesRequest) Reset() {
	*x = ListSpacesRequest{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSpacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpacesRequest) ProtoMessage() {}

func (x *ListSpacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpacesRequest.ProtoReflect.Descriptor instead.
func (*ListSpacesRequest) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *ListSpacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSpacesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response to list spaces.
// The order of items in the response is determined by the server,
// and it's expected to remain stable (i.e. mostly append-only).
// Callers should save the returned page
type ListSpacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of space IDs.
	Spaces []string `protobuf:"bytes,1,rep,name=spaces,proto3" json:"spaces,omitempty"`
	// Token for the next page.
	// Unlike most of our other APIs this field would always be there,
	// even if there are no more results to return.
	// This is done to let users cache the token and use it for periodically
	// polling for more results.
	// To actually check whether there's more data to fetch
	// callers should check the `has_more_results` field.
	// Basically, the `next_page_token` field here is like a cursor,
	// that users can store and continue fetching more results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Whether there are more results to fetch.
	HasMoreResults bool `protobuf:"varint,3,opt,name=has_more_results,json=hasMoreResults,proto3" json:"has_more_results,omitempty"`
}

func (x *ListSpacesResponse) Reset() {
	*x = ListSpacesResponse{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSpacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpacesResponse) ProtoMessage() {}

func (x *ListSpacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpacesResponse.ProtoReflect.Descriptor instead.
func (*ListSpacesResponse) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{3}
}

func (x *ListSpacesResponse) GetSpaces() []string {
	if x != nil {
		return x.Spaces
	}
	return nil
}

func (x *ListSpacesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListSpacesResponse) GetHasMoreResults() bool {
	if x != nil {
		return x.HasMoreResults
	}
	return false
}

// Request Invoice request.
type RequestInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The invoice amount in satoshis
	AmountSats int64 `protobuf:"varint,1,opt,name=amount_sats,json=amountSats,proto3" json:"amount_sats,omitempty"`
	// Required. The account we request this invoice from
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// Optional requested memo to be attached in the invoice
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// True to request a hold invoice instead of a regular one. If true, then preimage_hash should be filled
	HoldInvoice bool `protobuf:"varint,4,opt,name=hold_invoice,json=holdInvoice,proto3" json:"hold_invoice,omitempty"`
	// Preimage hash of the requested hold invoice. If hold_invoice is set to false this field is skipped
	PreimageHash []byte `protobuf:"bytes,5,opt,name=preimage_hash,json=preimageHash,proto3" json:"preimage_hash,omitempty"`
}

func (x *RequestInvoiceRequest) Reset() {
	*x = RequestInvoiceRequest{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInvoiceRequest) ProtoMessage() {}

func (x *RequestInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInvoiceRequest.ProtoReflect.Descriptor instead.
func (*RequestInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{4}
}

func (x *RequestInvoiceRequest) GetAmountSats() int64 {
	if x != nil {
		return x.AmountSats
	}
	return 0
}

func (x *RequestInvoiceRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RequestInvoiceRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *RequestInvoiceRequest) GetHoldInvoice() bool {
	if x != nil {
		return x.HoldInvoice
	}
	return false
}

func (x *RequestInvoiceRequest) GetPreimageHash() []byte {
	if x != nil {
		return x.PreimageHash
	}
	return nil
}

// Request invoice response
type RequestInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text encoded BOLT-11 Invoice
	PayReq string `protobuf:"bytes,1,opt,name=pay_req,json=payReq,proto3" json:"pay_req,omitempty"`
}

func (x *RequestInvoiceResponse) Reset() {
	*x = RequestInvoiceResponse{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInvoiceResponse) ProtoMessage() {}

func (x *RequestInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInvoiceResponse.ProtoReflect.Descriptor instead.
func (*RequestInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{5}
}

func (x *RequestInvoiceResponse) GetPayReq() string {
	if x != nil {
		return x.PayReq
	}
	return ""
}

// Response to list peers.
type ListPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer information
	Peers []*PeerInfo `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	// Token to continue listing peers from.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPeersResponse) Reset() {
	*x = ListPeersResponse{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeersResponse) ProtoMessage() {}

func (x *ListPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeersResponse.ProtoReflect.Descriptor instead.
func (*ListPeersResponse) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{6}
}

func (x *ListPeersResponse) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *ListPeersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CID of the blob.
	Cid []byte `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Cursor can be used to resume the stream to get only newer blobs than this one.
	// Clients must not expect that all blobs will have a cursor (might be done as an optimization),
	// but whenever they see a cursor for a blob they have already processed, they should remember it for future requests.
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{7}
}

func (x *Blob) GetCid() []byte {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Blob) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// Various details about a known peer.
type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Libp2p peer ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of known multiaddrs of the peer.
	Addrs []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// Connection status of our node with a remote peer.
	ConnectionStatus ConnectionStatus `protobuf:"varint,3,opt,name=connection_status,json=connectionStatus,proto3,enum=com.seed.p2p.v1alpha.ConnectionStatus" json:"connection_status,omitempty"`
	// When wthe peer updated its addresses for the last time.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_v1alpha_p2p_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_p2p_v1alpha_p2p_proto_rawDescGZIP(), []int{8}
}

func (x *PeerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerInfo) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *PeerInfo) GetConnectionStatus() ConnectionStatus {
	if x != nil {
		return x.ConnectionStatus
	}
	return ConnectionStatus_NOT_CONNECTED
}

func (x *PeerInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_p2p_v1alpha_p2p_proto protoreflect.FileDescriptor

var file_p2p_v1alpha_p2p_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x32, 0x70, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x32,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65,
	0x64, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x31, 0x0a, 0x16, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x22, 0x71, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x32, 0x70, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x30, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0xc0, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x2a, 0x66, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0x84, 0x03, 0x0a,
	0x03, 0x50, 0x32, 0x50, 0x12, 0x51, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x62,
	0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x32, 0x70,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64, 0x2e,
	0x70, 0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64, 0x2e, 0x70,
	0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x65, 0x65, 0x64, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x65, 0x64,
	0x2e, 0x70, 0x32, 0x70, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x73, 0x65, 0x65, 0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x32, 0x70,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x70, 0x32, 0x70, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_p2p_v1alpha_p2p_proto_rawDescOnce sync.Once
	file_p2p_v1alpha_p2p_proto_rawDescData = file_p2p_v1alpha_p2p_proto_rawDesc
)

func file_p2p_v1alpha_p2p_proto_rawDescGZIP() []byte {
	file_p2p_v1alpha_p2p_proto_rawDescOnce.Do(func() {
		file_p2p_v1alpha_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2p_v1alpha_p2p_proto_rawDescData)
	})
	return file_p2p_v1alpha_p2p_proto_rawDescData
}

var file_p2p_v1alpha_p2p_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_p2p_v1alpha_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_p2p_v1alpha_p2p_proto_goTypes = []any{
	(ConnectionStatus)(0),          // 0: com.seed.p2p.v1alpha.ConnectionStatus
	(*ListBlobsRequest)(nil),       // 1: com.seed.p2p.v1alpha.ListBlobsRequest
	(*ListPeersRequest)(nil),       // 2: com.seed.p2p.v1alpha.ListPeersRequest
	(*ListSpacesRequest)(nil),      // 3: com.seed.p2p.v1alpha.ListSpacesRequest
	(*ListSpacesResponse)(nil),     // 4: com.seed.p2p.v1alpha.ListSpacesResponse
	(*RequestInvoiceRequest)(nil),  // 5: com.seed.p2p.v1alpha.RequestInvoiceRequest
	(*RequestInvoiceResponse)(nil), // 6: com.seed.p2p.v1alpha.RequestInvoiceResponse
	(*ListPeersResponse)(nil),      // 7: com.seed.p2p.v1alpha.ListPeersResponse
	(*Blob)(nil),                   // 8: com.seed.p2p.v1alpha.Blob
	(*PeerInfo)(nil),               // 9: com.seed.p2p.v1alpha.PeerInfo
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
}
var file_p2p_v1alpha_p2p_proto_depIdxs = []int32{
	9,  // 0: com.seed.p2p.v1alpha.ListPeersResponse.peers:type_name -> com.seed.p2p.v1alpha.PeerInfo
	0,  // 1: com.seed.p2p.v1alpha.PeerInfo.connection_status:type_name -> com.seed.p2p.v1alpha.ConnectionStatus
	10, // 2: com.seed.p2p.v1alpha.PeerInfo.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 3: com.seed.p2p.v1alpha.P2P.ListBlobs:input_type -> com.seed.p2p.v1alpha.ListBlobsRequest
	2,  // 4: com.seed.p2p.v1alpha.P2P.ListPeers:input_type -> com.seed.p2p.v1alpha.ListPeersRequest
	3,  // 5: com.seed.p2p.v1alpha.P2P.ListSpaces:input_type -> com.seed.p2p.v1alpha.ListSpacesRequest
	5,  // 6: com.seed.p2p.v1alpha.P2P.RequestInvoice:input_type -> com.seed.p2p.v1alpha.RequestInvoiceRequest
	8,  // 7: com.seed.p2p.v1alpha.P2P.ListBlobs:output_type -> com.seed.p2p.v1alpha.Blob
	7,  // 8: com.seed.p2p.v1alpha.P2P.ListPeers:output_type -> com.seed.p2p.v1alpha.ListPeersResponse
	4,  // 9: com.seed.p2p.v1alpha.P2P.ListSpaces:output_type -> com.seed.p2p.v1alpha.ListSpacesResponse
	6,  // 10: com.seed.p2p.v1alpha.P2P.RequestInvoice:output_type -> com.seed.p2p.v1alpha.RequestInvoiceResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_p2p_v1alpha_p2p_proto_init() }
func file_p2p_v1alpha_p2p_proto_init() {
	if File_p2p_v1alpha_p2p_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2p_v1alpha_p2p_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_p2p_v1alpha_p2p_proto_goTypes,
		DependencyIndexes: file_p2p_v1alpha_p2p_proto_depIdxs,
		EnumInfos:         file_p2p_v1alpha_p2p_proto_enumTypes,
		MessageInfos:      file_p2p_v1alpha_p2p_proto_msgTypes,
	}.Build()
	File_p2p_v1alpha_p2p_proto = out.File
	file_p2p_v1alpha_p2p_proto_rawDesc = nil
	file_p2p_v1alpha_p2p_proto_goTypes = nil
	file_p2p_v1alpha_p2p_proto_depIdxs = nil
}
