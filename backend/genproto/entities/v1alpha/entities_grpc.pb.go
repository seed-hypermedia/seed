// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: entities/v1alpha/entities.proto

package entities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntitiesClient is the client API for Entities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntitiesClient interface {
	// Gets a change by ID.
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*Change, error)
	// Gets the DAG of changes for an entity.
	GetEntityTimeline(ctx context.Context, in *GetEntityTimelineRequest, opts ...grpc.CallOption) (*EntityTimeline, error)
	// Triggers a best-effort discovery of an entity.
	DiscoverEntity(ctx context.Context, in *DiscoverEntityRequest, opts ...grpc.CallOption) (*DiscoverEntityResponse, error)
	// Finds the list of local entities whose titles match the input string.
	// A fuzzy search is performed among documents, groups and accounts.
	// For groups and documents, we match the title, while we match alias in accounts.
	SearchEntities(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*SearchEntitiesResponse, error)
	// Deletes an entity from the local node. It removes all the patches corresponding to it, including comments.
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists deleted entities.
	ListDeletedEntities(ctx context.Context, in *ListDeletedEntitiesRequest, opts ...grpc.CallOption) (*ListDeletedEntitiesResponse, error)
	// Undo the entity delition by removing the entity from the deleted list. That entity, if available
	// will be synced back in the next syncing round (or manually discovered).
	UndeleteEntity(ctx context.Context, in *UndeleteEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List mentions of a given Entity across the locally-available content.
	ListEntityMentions(ctx context.Context, in *ListEntityMentionsRequest, opts ...grpc.CallOption) (*ListEntityMentionsResponse, error)
	ListLibrary(ctx context.Context, in *ListLibraryRequest, opts ...grpc.CallOption) (*ListLibraryResponse, error)
}

type entitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitiesClient(cc grpc.ClientConnInterface) EntitiesClient {
	return &entitiesClient{cc}
}

func (c *entitiesClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) GetEntityTimeline(ctx context.Context, in *GetEntityTimelineRequest, opts ...grpc.CallOption) (*EntityTimeline, error) {
	out := new(EntityTimeline)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/GetEntityTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) DiscoverEntity(ctx context.Context, in *DiscoverEntityRequest, opts ...grpc.CallOption) (*DiscoverEntityResponse, error) {
	out := new(DiscoverEntityResponse)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/DiscoverEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) SearchEntities(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*SearchEntitiesResponse, error) {
	out := new(SearchEntitiesResponse)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/SearchEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) ListDeletedEntities(ctx context.Context, in *ListDeletedEntitiesRequest, opts ...grpc.CallOption) (*ListDeletedEntitiesResponse, error) {
	out := new(ListDeletedEntitiesResponse)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/ListDeletedEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) UndeleteEntity(ctx context.Context, in *UndeleteEntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/UndeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) ListEntityMentions(ctx context.Context, in *ListEntityMentionsRequest, opts ...grpc.CallOption) (*ListEntityMentionsResponse, error) {
	out := new(ListEntityMentionsResponse)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/ListEntityMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) ListLibrary(ctx context.Context, in *ListLibraryRequest, opts ...grpc.CallOption) (*ListLibraryResponse, error) {
	out := new(ListLibraryResponse)
	err := c.cc.Invoke(ctx, "/com.seed.entities.v1alpha.Entities/ListLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitiesServer is the server API for Entities service.
// All implementations should embed UnimplementedEntitiesServer
// for forward compatibility
type EntitiesServer interface {
	// Gets a change by ID.
	GetChange(context.Context, *GetChangeRequest) (*Change, error)
	// Gets the DAG of changes for an entity.
	GetEntityTimeline(context.Context, *GetEntityTimelineRequest) (*EntityTimeline, error)
	// Triggers a best-effort discovery of an entity.
	DiscoverEntity(context.Context, *DiscoverEntityRequest) (*DiscoverEntityResponse, error)
	// Finds the list of local entities whose titles match the input string.
	// A fuzzy search is performed among documents, groups and accounts.
	// For groups and documents, we match the title, while we match alias in accounts.
	SearchEntities(context.Context, *SearchEntitiesRequest) (*SearchEntitiesResponse, error)
	// Deletes an entity from the local node. It removes all the patches corresponding to it, including comments.
	DeleteEntity(context.Context, *DeleteEntityRequest) (*emptypb.Empty, error)
	// Lists deleted entities.
	ListDeletedEntities(context.Context, *ListDeletedEntitiesRequest) (*ListDeletedEntitiesResponse, error)
	// Undo the entity delition by removing the entity from the deleted list. That entity, if available
	// will be synced back in the next syncing round (or manually discovered).
	UndeleteEntity(context.Context, *UndeleteEntityRequest) (*emptypb.Empty, error)
	// List mentions of a given Entity across the locally-available content.
	ListEntityMentions(context.Context, *ListEntityMentionsRequest) (*ListEntityMentionsResponse, error)
	ListLibrary(context.Context, *ListLibraryRequest) (*ListLibraryResponse, error)
}

// UnimplementedEntitiesServer should be embedded to have forward compatible implementations.
type UnimplementedEntitiesServer struct {
}

func (UnimplementedEntitiesServer) GetChange(context.Context, *GetChangeRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChange not implemented")
}
func (UnimplementedEntitiesServer) GetEntityTimeline(context.Context, *GetEntityTimelineRequest) (*EntityTimeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityTimeline not implemented")
}
func (UnimplementedEntitiesServer) DiscoverEntity(context.Context, *DiscoverEntityRequest) (*DiscoverEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverEntity not implemented")
}
func (UnimplementedEntitiesServer) SearchEntities(context.Context, *SearchEntitiesRequest) (*SearchEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEntities not implemented")
}
func (UnimplementedEntitiesServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedEntitiesServer) ListDeletedEntities(context.Context, *ListDeletedEntitiesRequest) (*ListDeletedEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeletedEntities not implemented")
}
func (UnimplementedEntitiesServer) UndeleteEntity(context.Context, *UndeleteEntityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteEntity not implemented")
}
func (UnimplementedEntitiesServer) ListEntityMentions(context.Context, *ListEntityMentionsRequest) (*ListEntityMentionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntityMentions not implemented")
}
func (UnimplementedEntitiesServer) ListLibrary(context.Context, *ListLibraryRequest) (*ListLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLibrary not implemented")
}

// UnsafeEntitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntitiesServer will
// result in compilation errors.
type UnsafeEntitiesServer interface {
	mustEmbedUnimplementedEntitiesServer()
}

func RegisterEntitiesServer(s grpc.ServiceRegistrar, srv EntitiesServer) {
	s.RegisterService(&Entities_ServiceDesc, srv)
}

func _Entities_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/GetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_GetEntityTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).GetEntityTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/GetEntityTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).GetEntityTimeline(ctx, req.(*GetEntityTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_DiscoverEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).DiscoverEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/DiscoverEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).DiscoverEntity(ctx, req.(*DiscoverEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_SearchEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).SearchEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/SearchEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).SearchEntities(ctx, req.(*SearchEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_ListDeletedEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeletedEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).ListDeletedEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/ListDeletedEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).ListDeletedEntities(ctx, req.(*ListDeletedEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_UndeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).UndeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/UndeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).UndeleteEntity(ctx, req.(*UndeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_ListEntityMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityMentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).ListEntityMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/ListEntityMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).ListEntityMentions(ctx, req.(*ListEntityMentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_ListLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).ListLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.seed.entities.v1alpha.Entities/ListLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).ListLibrary(ctx, req.(*ListLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entities_ServiceDesc is the grpc.ServiceDesc for Entities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.seed.entities.v1alpha.Entities",
	HandlerType: (*EntitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChange",
			Handler:    _Entities_GetChange_Handler,
		},
		{
			MethodName: "GetEntityTimeline",
			Handler:    _Entities_GetEntityTimeline_Handler,
		},
		{
			MethodName: "DiscoverEntity",
			Handler:    _Entities_DiscoverEntity_Handler,
		},
		{
			MethodName: "SearchEntities",
			Handler:    _Entities_SearchEntities_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Entities_DeleteEntity_Handler,
		},
		{
			MethodName: "ListDeletedEntities",
			Handler:    _Entities_ListDeletedEntities_Handler,
		},
		{
			MethodName: "UndeleteEntity",
			Handler:    _Entities_UndeleteEntity_Handler,
		},
		{
			MethodName: "ListEntityMentions",
			Handler:    _Entities_ListEntityMentions_Handler,
		},
		{
			MethodName: "ListLibrary",
			Handler:    _Entities_ListLibrary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entities/v1alpha/entities.proto",
}
