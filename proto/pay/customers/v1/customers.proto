syntax = "proto3";

package customers.v1;

import "google/protobuf/timestamp.proto";
import "pay/accounts/v1/accounts.proto";
import "pay/accounts/v1/prices.proto";

// Customers service provides functionality to create and manage customer
// accounts. Even though customers hang from the platform, they have their own
// api because the authorization and authentication of customers is different
// from the platform itself.
service Customers {
  // Creates a new customer. Multiple calls with the same uid will
  // return the same customer. If the customer already exists, it will
  // update the customer with the provided name.
  rpc NewCustomer(NewCustomerRequest) returns (CustomerResponse);

  // Creates a hostedcustomer session not to be used with embedded components.
  // This session can be used to redirect the user to a hosted page where they
  // can interact with the customer components. This session is used to display
  // a
  rpc CreateCustomerSession(CustomerSessionRequest)
      returns (CustomerSessionResponse);

  // Creates a customer portal session so that the customer can manage their
  // payment methods, view their payment history, and update their account
  // information. The customer portal is a web page that the customer can access
  // to manage their.
  rpc CreateCustomerPortalSession(CustomerPortalSessionRequest)
      returns (CustomerPortalSessionResponse);
}

service Payments {
  // Creates a checkout session for the customer. This session can be used to
  // display a checkout page to the customer. The session will be valid for a
  // short period of time and can be used only once. After the session expires,
  // the user will need to create a new session to interact with the checkout
  // page.
  rpc CreateCheckoutSession(CheckoutSessionRequest)
      returns (CheckoutSessionResponse);

  // List all transactions for the account. Both incoming and outgoing.
  rpc ListTransactions(ListTransactionsRequest)
      returns (accounts.v1.ListTransactionsResponse);
}

// The customer request.
message NewCustomerRequest {
  // Required. The uid of the account we are creating the customer for.
  string uid = 1;

  // Optional. Non unique, public facing name of the customer.
  // Could be a nickname or a full name. This is used for display purposes
  // only and does not need to be unique. It can be used to identify
  // the customer in the UI.
  string name = 2;
}

// The customer request.
message CustomerRequest {
  // Required. The uid of the customer.
  string uid = 1;
}

// The customer portal session request.
message CustomerPortalSessionRequest {
  // Required. The uid of the customer.
  string uid = 1;

  // Optional. The URL to redirect the user to after the user cancelled or goes
  // back from the customer portal page. If not provided, the user will be
  // redirected to the default customer portal page https://seed.hyper.media.
  string return_url = 2;
}

// The response with the customer portal session link.
message CustomerPortalSessionResponse {
  // The session URL that the customer can use to access the customer portal.
  string url = 1;
}

// The response with the customer information.
message CustomerResponse {
  // The newly created customer.
  Customer customer = 1;
}

// The components that the user can interact with using the customer session.
enum SessionComponents {
  SES_COMP_BUY_BUTTON = 0;
  SES_COMP_PAYMENT_ELEMENT = 1;
  SES_COMP_PRICING_TABLE = 2;
}

// Request a customer session secret to be used with embedded components.
message CustomerSessionRequest {
  // Required. The uid of the customer to create a session for.
  string uid = 1;

  // Required. Which component the user will be able to interact with using this
  // session. Only one component can be specified at a time.
  SessionComponents component = 2;
}

// The response with the customer session.
message CustomerSessionResponse {
  // The session secret that the user will use to interact with the embedded
  // components. This secret should be used only once and is valid for a short
  // period of time. After the session expires, the user will need to create a
  // new session to interact with the embedded components.
  string secret = 1;

  // When the session will expire. After this time, the secret will no longer
  // be valid and the user will need to start a new account session.
  google.protobuf.Timestamp session_expiration = 2;

  // If the account session is for production or not. If false, the
  // session is for testing purposes and will not affect real payments.
  bool is_production = 3;
}

// Description of the event occurred in the system.
message Customer {
  // The unique identifyer of the customer
  string uid = 1;

  // The public facing name of the customer
  string name = 2;

  // When the customer was actually created.
  google.protobuf.Timestamp created_time = 3;
}

enum UIMode {
  UI_MODE_CUSTOM = 0;   // Default mode, usually a full page checkout.
  UI_MODE_EMBEDDED = 1; // Embedded mode, used for embedded components.
  UI_MODE_HOSTED = 2;   // Hosted mode, used for hosted pages.
}

// The request to create a checkout session for the customer. Currently only
// donations are supported, so the price will be an open price to be set by the
// customer at the checkout page. Only non recurrent payments are supported at
// the moment.
message CheckoutSessionRequest {
  // Required: The URL to redirect the user to after the user either goes back
  // or the payment succeds. The behaviour depends on the ui_mode. If the
  // ui_mode is UI_MODE_CUSTOM or UI_MODE_EMBEDDED, this will be the URL the
  // user will be redirected to if they go back from the checkout page. If the
  // ui_mode is UI_MODE_HOSTED, this will be the URL the user will be redirected
  // to after the payment is successful.
  oneof url {
    // For custom and embedded checkout sessions, the URL to redirect the user
    // to after the user goes back from the checkout page. This URL is usually
    // the page where the user started the checkout process. It is used to
    // return the user to the page they were on before starting the checkout
    // process, so they can continue browsing the site or app.
    string return_url = 1;

    // For hosted checkout sessions, the URL to redirect the user to
    // after the payment is successful.
    string success_url = 2;
  }

  // Required: The UI mode for the checkout session. This will modify how
  // we respond to the user. On Custom and EMbedded modes, the response will
  // contain a session secret that the user can use to interact with the
  // checkout page. On Hosted mode, the response will contain a URL that the
  // user can use to access the checkout page directly.
  UIMode ui_mode = 3;

  // Optional. The price information that will be used to charge the customer.
  // If price.id is provided, the rest of the fields will be ignored and the
  // price will be populated as described in the price.id. If price.id is not
  // provided, the rest og the fields will be used to create the price
  // information. The first price.info will be used to get quantity and currency
  // information.
  accounts.v1.Price price = 4;

  // Optional. The uid of the account to be paid. This account will receive a
  // payment from the payer_uid (The customer, if provided) and will be used to
  // create the session. If payee_uid is not provided, the session will be
  // created for the platform account, meaning the customer is paying for a
  // platform service or product.
  string payee_uid = 5;

  // Optional. The uid of the customer to create a session for. If not provided,
  // the session will be created for a guest customer (usually a web user) but
  // payments will not be associated with a specific customer and will not keep
  // track of the customer's payment methods or history.
  string payer_uid = 6;
}

// The response with the checkout session information.
message CheckoutSessionResponse {
  // The session secret that the user will use to interact with the checkout
  // page. This secret should be used only once and is valid for a short period
  // of time. After the session expires, the user will need to create a new
  // session to interact with the checkout page.
  oneof link {
    // For embedded and custom checkout sessions, the secret that the user will
    // use to interact with the checkout page.
    string secret = 1;
    // For hosted checkout sessions, the URL to redirect the user to.
    string url = 2;
  }

  // When the session will expire. After this time, the secret will no longer
  // be valid and the user will need to start a new checkout session.
  google.protobuf.Timestamp session_expiration = 3;

  // If the account session is for production or not. If false, the
  // session is for testing purposes and will not affect real payments.
  bool is_production = 4;
}

message ListTransactionsRequest {
  // Required. The id of the customer to list transactions for.
  string uid = 1;

  // Optional. The maximum number of transactions to return. Default is 100.
  int32 page_size = 2;

  // Optional. The page token to use for pagination.
  // If not provided, all transactions will be returned.
  string page_token = 3;
}
