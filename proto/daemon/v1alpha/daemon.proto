syntax = "proto3";

package com.seed.daemon.v1alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "seed/backend/genproto/daemon/v1alpha;daemon";

// Daemon API allows to control and administer the Seed Daemon.
service Daemon {
  // Generates a set of BIP-39-compatible mnemonic words encoding a cryptographic seed.
  // This is a stateless call, and the generated mnemonic is not stored anywhere.
  // Subsequent call to RegisterKey can be used to register a new signing key derived from the mnemonic.
  rpc GenMnemonic(GenMnemonicRequest) returns (GenMnemonicResponse);

  // After generating the seed, this call is used to commit the seed and
  // create an account binding between the device and account.
  rpc RegisterKey(RegisterKeyRequest) returns (NamedKey);

  // Get generic information about the running node.
  rpc GetInfo(GetInfoRequest) returns (Info);

  // Force-trigger periodic background sync of Seed objects.
  rpc ForceSync(ForceSyncRequest) returns (google.protobuf.Empty);

  // Lists all the signing keys registered on this Daemon.
  rpc ListKeys(ListKeysRequest) returns (ListKeysResponse);

  // Updates the existing key.
  rpc UpdateKey(UpdateKeyRequest) returns (NamedKey);

  // Deletes a key from the underlying key store.
  rpc DeleteKey(DeleteKeyRequest) returns (google.protobuf.Empty);

  // Deletes all Seed keys from the underlying key store.
  rpc DeleteAllKeys(DeleteAllKeysRequest) returns (google.protobuf.Empty);

  // Receives raw blobs to be stored.
  // The request may fail if blobs can't be recognized by the daemon.
  rpc StoreBlobs(StoreBlobsRequest) returns (StoreBlobsResponse);

  // Creates a new device link session.
  // The session information has to be transferred to the other device,
  // to establish a direct P2P connection between the devices, and complete the linking process.
  //
  // There can only be one active session at a time, and creating a new one will invalidate the previous one.
  //
  // After the session is redeemed, it becomes invalid.
  rpc CreateDeviceLinkSession(CreateDeviceLinkSessionRequest) returns (DeviceLinkSession);

  // Get the current device link session (if it exists).
  rpc GetDeviceLinkSession(GetDeviceLinkSessionRequest) returns (DeviceLinkSession);
}

// Request to generate mnemonic words.
message GenMnemonicRequest {
  // Optional. Number of mnemonic words to encode the seed.
  // Usually 12 or 24 words.
  // By default 12 words are generated.
  int32 word_count = 1;
}

// Response with the generated mnemonic.
message GenMnemonicResponse {
  // The list of human-friendly words that can be used to backup the seed. These
  // words must be stored in a secret place by the user.
  repeated string mnemonic = 1;
}

// Request to register a new account key derived from the mnemonic.
message RegisterKeyRequest {
  // Required. The list of BIP-39 mnemonic words.
  repeated string mnemonic = 1;

  // Optional. Passphrase for the seed.
  string passphrase = 2;

  // Required. Private name/label for the signing key, to easily identify keys when they are more than one.
  // Name must be unique across all the registered keys.
  string name = 3;
}

// Request to get basic information about the running daemon.
message GetInfoRequest {}

// Request to force the syncing process.
message ForceSyncRequest {}

// Request to delete all keys.
message DeleteAllKeysRequest {}

// Request to list signing keys.
message ListKeysRequest {}

// Response with the list of registered signing keys.
message ListKeysResponse {
  // List of registered keys.
  repeated NamedKey keys = 1;
}

// Request to change the key name.
message UpdateKeyRequest {
  // Current name of the key.
  string current_name = 1;

  // New name for the key.
  string new_name = 2;
}

// Request to delete an existing key.
message DeleteKeyRequest {
  // Name of the key to delete.
  string name = 1;
}

// Request to store blobs.
message StoreBlobsRequest {
  // Required. List of blobs to be stored.
  // The request is atomic: either all blobs are stored or none of them.
  repeated Blob blobs = 1;
}

// Response after storing blobs.
message StoreBlobsResponse {
  // List of CIDs for the stored blobs.
  // The order is the same as in the request.
  repeated string cids = 1;
}

// Request to create a new device link session.
message CreateDeviceLinkSessionRequest {
  // Required. Name of the signing key for which to create the delegation.
  string signing_key_name = 1;

  // Optional. Label that will be used for the newly created capability.
  // The label is publicly visible.
  string label = 2;
}

// Request to get the device link session.
message GetDeviceLinkSessionRequest {}

// Information about the device link session.
message DeviceLinkSession {
  // Dial information for the node.
  AddrInfo addr_info = 1;

  // Secret token for the linking session.
  string secret_token = 2;

  // Account ID that wants to link the new device.
  string account_id = 3;

  // Label for the future capability as defined by the user.
  string label = 4;

  // Expiration time of the session.
  google.protobuf.Timestamp expire_time = 5;

  // Optional. Time when the session was redeemed,
  // i.e. when the device link exchange was completed successfully.
  google.protobuf.Timestamp redeem_time = 6;
}

// Address information about a single peer.
message AddrInfo {
  string peer_id = 1;

  repeated string addrs = 2;
}

// Raw blob to be stored.
message Blob {
  // Optional. The client can provide a CID for the blob (the server will verify it).
  // If not provided, the data is assumed to be DAG-CBOR encoded, and the server will generate a CID
  // using its default hash function.
  string cid = 1;

  // Required. Raw data of the blob.
  bytes data = 2;
}

// Info is a generic information about the running node.
message Info {
  // Current state of the daemon.
  State state = 1;

  // Libp2p Peer ID of this node.
  string peer_id = 2;

  // Start time of the node.
  google.protobuf.Timestamp start_time = 3;

  // The libp2p protocol ID that the daemon is using.
  string protocol_id = 4;
}

// State describes various states of the daemon.
enum State {
  // Daemon in starting up and it not ready to use yet.
  STARTING = 0;

  // Daemon is running a data migration, which may take a while.
  // Callers should poll and wait until the daemon becomes ACTIVE.
  MIGRATING = 1;

  // Daemon is active and ready to use.
  ACTIVE = 3;
}

// Signing key with an internal name.
message NamedKey {
  // Public key in Multikey format.
  // https://www.w3.org/TR/vc-data-integrity/#multikey.
  string public_key = 1;

  // Private name for the key. Useful to identify the keys when there're more than one.
  string name = 2;

  // Account ID representation of this key.
  string account_id = 3;
}
