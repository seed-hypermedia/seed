syntax = "proto3";

package com.seed.documents.v3alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "seed/backend/genproto/documents/v3alpha;documents";

// Documents service provides access to documents.
service Documents {
  // Retrieves an existing document.
  rpc GetDocument(GetDocumentRequest) returns (Document);

  // Creates a new Document Change.
  rpc CreateDocumentChange(CreateDocumentChangeRequest) returns (Document);

  // Deletes a document.
  rpc DeleteDocument(DeleteDocumentRequest) returns (google.protobuf.Empty);

  // Lists documents within the namespace. Only the most recent versions show up.
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse);

  // Lists all the root documents that we know about.
  rpc ListRootDocuments(ListRootDocumentsRequest) returns (ListRootDocumentsResponse);
}

// Request for getting a single document.
message GetDocumentRequest {
  // Required. The ID of the namespace where the document is located.
  string namespace = 1;

  // Required. Path of the document.
  // Empty string means root document.
  string path = 2;

  // Optional. Exact version of the document to retrieve.
  string version = 3;
}

// Request to create a new document change.
message CreateDocumentChangeRequest {
  // Required. The ID of the namespace where the document is located.
  string namespace = 1;

  // Required. Path of the document to create change for.
  // If document doesn't exist it will be created.
  // Empty string means root document.
  string path = 2;

  // Required. Changes to be applied to the document.
  repeated DocumentChange changes = 3;

  // Required. Name of the key to use for signing.
  // Use the Daemon API to list and manage keys.
  string signing_key_name = 4;
}

message DeleteDocumentRequest {
  // Required. ID of the namespace to delete the document from.
  string namespace = 1;

  // Required. Path of the document to delete.
  string path = 2;
}

// Request for listing root documents.
message ListRootDocumentsRequest {
  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 1;

  // Optional. Value from next_page_token obtained from a previous response.
  string page_token = 2;
}

// Response for listing root documents.
message ListRootDocumentsResponse {
  // List of root documents.
  repeated DocumentListItem documents = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// Request for listing documents.
message ListDocumentsRequest {
  // Required. ID of the namespace to list documents for.
  string namespace = 1;

  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 2;

  // Optional. Value from next_page_token obtained from a previous response.
  string page_token = 3;
}

// Response with list of documents.
message ListDocumentsResponse {
  // List of documents.
  repeated DocumentListItem documents = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// Basic data about a document that is returned in list responses.
// Content is omitted for efficiency reasons.
message DocumentListItem {
  // Namespace to which the document belongs.
  string namespace = 1;

  // Path of the document within the namespace.
  // Empty string means root document.
  string path = 2;

  // User-defined metadata attributes of the document.
  map<string, string> metadata = 3;

  // Every author ID who has modified this document's version.
  repeated string authors = 4;

  // Time when the document was created.
  google.protobuf.Timestamp create_time = 5;

  // Time when the document was updated.
  google.protobuf.Timestamp update_time = 6;

  // Current version of the document.
  string version = 8;
}

// Document represents metadata and content of a document.
message Document {
  // Namespace to which the document belongs.
  string namespace = 1;

  // Path of the document within the namespace.
  // Empty string means root document.
  string path = 2;

  // Metadata values for a document.
  map<string, string> metadata = 3;

  // Output only. Every account ID who has modified the document.
  // Includes the original author as well.
  repeated string authors = 5;

  // Blocks content of the document.
  repeated BlockNode content = 6;

  // Output only. Time when document was created.
  google.protobuf.Timestamp create_time = 7;

  // Output only. Time when document was updated.
  google.protobuf.Timestamp update_time = 8;

  // Output only. Current version of the document.
  string version = 9;

  // Output only. Previous version of the document,
  // Empty if this is the first version.
  string previous_version = 10;
}

// Content block with children.
message BlockNode {
  // Content block.
  Block block = 1;

  // Child blocks.
  repeated BlockNode children = 2;
}

// Content block.
message Block {
  // Block ID. Must be unique within the document.
  string id = 1;

  // Type of the block. Specific to the renderer.
  string type = 2;

  // Text of the content block.
  string text = 3;

  // Optional. The hyperlink to an external resource.
  // Must be a valid URL.
  string ref = 7;

  // Arbitrary attributes of the block.
  map<string, string> attributes = 4;

  // Annotation "layers" of the block.
  repeated Annotation annotations = 5;

  // Output only. Current revision of the block. It's the ID of the last Change that modified this block.
  // Additional information about the Change can be obtained using the Changes service.
  string revision = 6;
}

// Conceptual annotation "layer" that is applied to arbitrary spans of block text.
// An "identity" of the layer should be derived deterministically based on its type
// attributes. Spans inside the same annotation can't overlap.
//
// Spans are stored inside the Annotation in a "columnar" format,
// i.e. StructureOfArrays instead of ArrayOfStructures. See: https://en.wikipedia.org/wiki/AoS_and_SoA.
// This is useful to reduce the number of allocations and offers more compact serialization, because
// protobuf is able to "pack" primitive repeated fields more efficiently.
message Annotation {
  // Type of the annotation.
  string type = 1;

  // Optional. A hyperlink to an external resource.
  // Must be a valid URL.
  string ref = 5;

  // Arbitrary key-value attributes of the annotation.
  map<string, string> attributes = 2;

  // Start offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `ends` list.
  repeated int32 starts = 3;

  // End offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `starts` list.
  repeated int32 ends = 4;
}

// Granular document change.
message DocumentChange {
  // Operation to move an existing block to a different place in the document.
  // Move and Create operations are both expressed with this.
  // Conceptually new blocks are moved out of nowhere into the document.
  message MoveBlock {
    // ID of the block to move.
    string block_id = 1;

    // ID of the new parent for the block being moved.
    string parent = 2;

    // ID of the new left sibling for the block being moved.
    string left_sibling = 3;
  }

  // Operation to replace a metadata field with a new value
  message SetMetadata {
    // Metadata key to set.
    string key = 1;

    // Metadata value to set.
    string value = 2;
  }

  oneof op {
    // New metadata to set on the document.
    SetMetadata set_metadata = 1;

    // Move operation that creates/moves a block within the document hierarchy.
    MoveBlock move_block = 2;

    // New block state that replaces an existing block.
    Block replace_block = 3;

    // ID of a block to delete.
    string delete_block = 4;
  }
}
