syntax = "proto3";

package com.seed.documents.v3alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

option go_package = "seed/backend/genproto/documents/v3alpha;documents";

// TODO(burdiyan): rename account to space/site everywhere in this API.

// Documents service provides access to documents.
service Documents {
  // Retrieves an existing document.
  rpc GetDocument(GetDocumentRequest) returns (Document);

  // Creates a new Document Change.
  rpc CreateDocumentChange(CreateDocumentChangeRequest) returns (Document);

  // Deletes a document.
  //
  // Deprecated: Use CreateRef API.
  rpc DeleteDocument(DeleteDocumentRequest) returns (google.protobuf.Empty) {
    option deprecated = true;
  };

  // Lists all accounts.
  //
  // TODO(burdiyan): rename to spaces or sites.
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);

  // Gets a single account by ID.
  rpc GetAccount(GetAccountRequest) returns (Account);

  // Gets multiple accounts by IDs.
  rpc BatchGetAccounts(BatchGetAccountsRequest) returns (BatchGetAccountsResponse);

  // Updates the profile of an account.
  rpc UpdateProfile(UpdateProfileRequest) returns (Account);

  // Creates alias for an account.
  rpc CreateAlias(CreateAliasRequest) returns (google.protobuf.Empty);

  // Creates a new contact for an account.
  rpc CreateContact(CreateContactRequest) returns (Contact);

  // Gets a single contact by ID.
  rpc GetContact(GetContactRequest) returns (Contact);

  // Updates an existing contact.
  rpc UpdateContact(UpdateContactRequest) returns (Contact);

  // Deletes a contact from an account.
  rpc DeleteContact(DeleteContactRequest) returns (google.protobuf.Empty);

  // Lists contacts for an account.
  rpc ListContacts(ListContactsRequest) returns (ListContactsResponse);

  // Lists documents in a directory of an account.
  rpc ListDirectory(ListDirectoryRequest) returns (ListDirectoryResponse);

  // Lists documents within the account. Only the most recent versions show up.
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse);

  // Lists all the root documents that we know about.
  rpc ListRootDocuments(ListRootDocumentsRequest) returns (ListRootDocumentsResponse);

  // Lists all changes of a document.
  rpc ListDocumentChanges(ListDocumentChangesRequest) returns (ListDocumentChangesResponse);

  // Updates the read status of a document.
  rpc UpdateDocumentReadStatus(UpdateDocumentReadStatusRequest) returns (google.protobuf.Empty);

  // Creates a Ref blob for the specified account + path.
  rpc CreateRef(CreateRefRequest) returns (Ref);

  // Returns details about a Ref.
  rpc GetRef(GetRefRequest) returns (Ref);
}

// Request for getting a single document.
message GetDocumentRequest {
  // Required. The ID of the account where the document is located.
  string account = 1;

  // Required. Path of the document.
  // Empty string means root document.
  string path = 2;

  // Optional. Exact version of the document to retrieve.
  // Empty version means "latest".
  string version = 3;
}

// When GetDocument RPC fails due to an existing redirect, this message will be attached
// to the built-in status message's details field. The client should handle the error,
// and parse this message to follow the redirect.
// The client must be careful to prevent redirect cycles and very deep redirect chains.
message RedirectErrorDetails {
  // Account ID where the redirect points to.
  string target_account = 1;

  // Path of the target document within the target account.
  string target_path = 2;
}

// Request to create a new document change.
message CreateDocumentChangeRequest {
  // Required. The ID of the account where the document is located.
  string account = 1;

  // Required. Path of the document to create change for.
  // If document doesn't exist it will be created.
  // Empty string means root document.
  string path = 2;

  // Required. Version of the document to apply changes to.
  // Can be empty when creating a new document.
  string base_version = 3;

  // Required. Changes to be applied to the document.
  repeated DocumentChange changes = 4;

  // Required. Name of the key to use for signing.
  // Use the Daemon API to list and manage keys.
  string signing_key_name = 5;

  // Optional. ID of the capability that allows signing key to write on behalf of the account
  // for this particular path.
  string capability = 6;

  // Optional. Timestamp that the change should have.
  // By default current time is used.
  // The timestamp must be strictly greater than the timestamp of any other Change in the dependency chain.
  google.protobuf.Timestamp timestamp = 7;
}

message DeleteDocumentRequest {
  // Required. ID of the account to delete the document from.
  string account = 1;

  // Required. Path of the document to delete.
  string path = 2;
}

// Request for listing root documents.
message ListRootDocumentsRequest {
  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 1;

  // Optional. Value from next_page_token obtained from a previous response.
  string page_token = 2;
}

// Response for listing root documents.
message ListRootDocumentsResponse {
  // List of root documents.
  repeated DocumentInfo documents = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// Request to list accounts.
message ListAccountsRequest {
  // Optional. Number of results to return per page.
  // If not set, the server will pick some default number.
  int32 page_size = 1;

  // Optional. Token of the page to request, obtained from
  // a previous response.
  string page_token = 2;

  // Optional. If set to true, only accounts that the user is subscribed to will be returned.
  // If at least one document in the account has a subscription, then the account is considered subscribed.
  bool subscribed_only = 3;

  // Optional. Configuration for sorting the response.
  // If not specified, the default sorting is by activity time in descending order.
  SortOptions sort_options = 4;
}

// Response to list accounts.
message ListAccountsResponse {
  // List of accounts.
  repeated Account accounts = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// Request to get a single account by ID.
message GetAccountRequest {
  // Required. ID of the account to retrieve.
  string id = 1;
}

// Request to get multiple accounts by IDs.
message BatchGetAccountsRequest {
  // Required. List of account IDs to retrieve.
  repeated string ids = 1;
}

// Response to get multiple accounts by IDs.
message BatchGetAccountsResponse {
  // Accounts that were successfully retrieved,
  // keyed by account ID.
  map<string, Account> accounts = 1;

  // Errors (if any) that occurred while retrieving accounts,
  // keyed by account ID.
  // The value of the map is a serialized gRPC Status message.
  // It's not used as a concrete type here because it's exposed in a very accessible way,
  // but every gRPC client library has a defined type for the Status message.
  // See https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto,
  // and https://grpc.io/docs/guides/status-codes.
  map<string, bytes> errors = 2;
}

// Request to update a profile.
message UpdateProfileRequest {
  // Required. ID of the account to update the profile for.
  string account = 1;

  // Required. The updated profile data.
  Profile profile = 2;

  // Required. Name of the key to use for signing the profile.
  string signing_key_name = 3;
}

// Aggregated information about an account.
// Some of this information comes from the accounts' root document,
// some is aggregated from the other documents inside of the account.
message Account {
  // ID of the account.
  string id = 1;

  // Metadata attributes from the root document of this account's Space.
  google.protobuf.Struct metadata = 2;

  // Summary of the activity in the entire account.
  ActivitySummary activity_summary = 3;

  // Whether the user is subscribed to this account.
  // If at least one document in the account has a subscription, then the account is considered subscribed.
  bool is_subscribed = 4;

  // Optional. ID of another Account this account claims to act on behalf of.
  // If this is present all the other fields should be ignored.
  // It's up to the caller to follow the alias and get the actual account data.
  string alias_account = 5;

  // Optional. Profile information about the account.
  // Can be missing if there's no Profile blob for this account.
  Profile profile = 6;
}

// Profile describes properties of an account.
message Profile {
  // Display name of the account.
  string name = 1;

  // URI for the icon/avatar.
  string icon = 2;

  // Optional short description text.
  string description = 3;

  // Output only. Time when the profile was updated.
  // This field is set by the server, and is ignored in update requests from the client.
  google.protobuf.Timestamp update_time = 4;
}

// Request to create an alias for a key.
// There must be an agent capability granted to the signer of the alias.
message CreateAliasRequest {
  // Required. Key to use for signing the alias.
  string signing_key_name = 1;

  // Required. ID of the target (alias) account.
  string alias_account = 2;
}

// Request to create a contact.
message CreateContactRequest {
  // Required. ID of the account to create the contact for.
  string account = 1;

  // Required. Name of the key to use for signing.
  string signing_key_name = 2;

  // Required. Account ID about which we are issuing the contact record.
  string subject = 3;

  // Required. Name that we know the subject by.
  string name = 4;
}

// Request to get a contact by ID.
message GetContactRequest {
  // Required. ID of the account issuer of the contact record.
  string account = 1;

  // Required. ID of the contact within the account.
  string id = 2;
}

// Request to delete a contact.
message UpdateContactRequest {
  // Required. Full snapshot of the updated contact record.
  // Clients should update objects received from GetContact or CreateContact calls.
  // The server will ignore output-only fields like timestamps.
  Contact contact = 1;

  // Required. Name of the key to use for signing the contact update.
  string signing_key_name = 2;
}

// Request to delete a contact.
message DeleteContactRequest {
  // Required. ID of the account issuer of the contact record.
  string account = 1;

  // Required. ID of the contact within the account.
  string id = 2;

  // Required. Name of the key to use for signing the contact deletion.
  string signing_key_name = 3;
}

// Request to list contacts for an account.
message ListContactsRequest {
  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 1;

  // Optional. Value from next_page_token obtained from a previous response.
  string page_token = 2;

  // Required. Filter for listing contacts.
  oneof filter {
    // Lists contacts by issuer account key.
    // I.e. lists the contacts that an account has ever issued.
    string account = 3;

    // Lists contacts by subject.
    string subject = 4;
  }
}

// Response for listing contacts.
message ListContactsResponse {
  // List of contacts.
  repeated Contact contacts = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// Contact information for an account.
message Contact {
  // ID of the contact.
  string id = 1;

  // Subject is the account that's being described by the contact record.
  string subject = 2;

  // Name is the public name of the contact that we know them by.
  string name = 3;

  // Time when the contact was created.
  google.protobuf.Timestamp create_time = 4;

  // Time when the contact was updated.
  google.protobuf.Timestamp update_time = 5;

  // Account ID that issued this contact.
  string account = 6;
}

// Request to list a directory.
message ListDirectoryRequest {
  // Optional. Size of the page.
  int32 page_size = 1;

  // Optional. Pagination token.
  string page_token = 2;

  // Required. ID of the account to list the directory for.
  string account = 3;

  // Required. Path of the directory to list documents for.
  // Empty string means root directory.
  string directory_path = 4;

  // Optional. If true, list documents recursively.
  bool recursive = 5;

  // Optional. If set to true, only documents that the user is subscribed to will be returned.
  bool subscribed_only = 6;

  // Optional. Configuration for sorting.
  // If not specified, the default sorting is by activity time in descending order.
  SortOptions sort_options = 7;
}

// Options for sorting list of documents.
message SortOptions {
  // Attributes by which the list can be sorted.
  SortAttribute attribute = 1;

  // By default sort is ascending (smaller values first).
  // This field can be specified to choose the opposing sorting.
  bool descending = 2;
}

// Attrbites that can be used for sorting.
enum SortAttribute {
  // Sorting by activity time,
  // i.e. time of the latest comment or change.
  ACTIVITY_TIME = 0;

  // Sorting by name/title of the document.
  NAME = 1;

  // Sorting by path value.
  // When documents from multiple accounts are returned in the same listing,
  // the entire fully-qualified namespaced path is considered,
  // i.e. <account-id>/<path>.
  PATH = 2;
}

// Response of the directory list.
message ListDirectoryResponse {
  // List of documents.
  repeated DocumentInfo documents = 1;

  // Optional. Token for the next page if there're more results.
  string next_page_token = 2;
}

// Request for listing documents.
message ListDocumentsRequest {
  // Optional. ID of the account to list documents for.
  // If not specified, all documents are listed.
  string account = 1;

  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 2;

  // Optional. Value from next_page_token obtained from a previous response.
  string page_token = 3;
}

// Response with list of documents.
message ListDocumentsResponse {
  // List of documents.
  repeated DocumentInfo documents = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// Request for listing document changes.
message ListDocumentChangesRequest {
  // Required. ID of the account to list versions for.
  string account = 1;

  // Required. Path of the document to list versions for.
  string path = 2;

  // Required. Version of the document to list changes for.
  string version = 3;

  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 4;

  // Optional. Value from next_page_token obtained from a previous response.
  string page_token = 5;
}

// Response with list of document versions.
message ListDocumentChangesResponse {
  // List of document versions.
  repeated DocumentChangeInfo changes = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// Request to update document's read status.
message UpdateDocumentReadStatusRequest {
  // Required. ID of the account to update the document in.
  string account = 1;

  // Required. Path of the document to update.
  string path = 2;

  // Required. New read status of the document.
  bool is_read = 3;

  // Optional. Whether the status should be updated recursively for children of the path.
  bool is_recursive = 4;
}

// Request to create a Ref.
message CreateRefRequest {
  // Required. The ID of the account/space in which to create the Ref.
  string account = 1;

  // Required. Path of the new Ref.
  // Empty string means root document.
  string path = 2;

  // Required. Target for the new Ref.
  RefTarget target = 3;

  // Required. Name of the signing key to use for signing the Ref.
  string signing_key_name = 4;

  // Optional. ID of the Capability blob that grants the necessary rights to the signin key
  // to write Refs for the requested account + path.
  string capability = 5;

  // Optional. A timestamp of the Ref blob.
  // If not specified the server will use the current time.
  // The provided timestamp will be rounded to the nearest millisecond,
  // so the final timestamp in the resulting Ref blob may not be exactly as provided.
  google.protobuf.Timestamp timestamp = 6;

  // Optional. The generation number for the Ref.
  // If not specified, the server will use the generation number of the most recent generation,
  // or will create a fresh generation number if there are no existing Refs for this path.
  int64 generation = 7;
}

// Request to get a Ref by ID.
message GetRefRequest {
  // Required. ID of the Ref blob to retrieve.
  string id = 1;
}

// Information about a particular document version.
message DocumentChangeInfo {
  // CID of the change.
  string id = 1;

  // Author of the change.
  string author = 2;

  // List of change IDs that this change depends on.
  repeated string deps = 3;

  // Time when the change was created (as claimed by the author).
  google.protobuf.Timestamp create_time = 4;
}

// Basic data about a document with some aggregations and metadata.
// It's like Document, without the content, but with some additional info.
message DocumentInfo {
  // Account to which the document belongs.
  string account = 1;

  // Path of the document within the account.
  // Empty string means root document.
  string path = 2;

  // User-defined metadata attributes of the document.
  google.protobuf.Struct metadata = 3;

  // Every author ID who has ever made changes to this document.
  repeated string authors = 4;

  // Time when the document was created.
  google.protobuf.Timestamp create_time = 5;

  // Time when the document was updated.
  // I.e. timestamp of the most recent change.
  google.protobuf.Timestamp update_time = 6;

  // ID of the genesis change of this document.
  string genesis = 8;

  // Current version of the document.
  string version = 9;

  // Breadcrumbs of this document.
  // The number of items in this list corresponds to the number of segments
  // in the path of the document minus 1 (the document itself).
  //
  // E.g. for a document "/cars/jp/honda" there will be 2 breadcrumbs: "cars" and "jp".
  //
  // If we don't have a document for some of the path segements for whatever reason,
  // the corresponding breadcrumb segment will be null.
  repeated Breadcrumb breadcrumbs = 10;

  // Summary of the activity on the document.
  ActivitySummary activity_summary = 11;

  // Information about the generation of the document.
  GenerationInfo generation_info = 12;
}

// Information about the generation of a document.
message GenerationInfo {
  // CID of the genesis change.
  string genesis = 1;

  // A generation number of the document.
  // Usually it's a timestamp of the first time the generation is created,
  // but it shouldn't be used as such, and should instead be treated as an opaque value.
  int64 generation = 2;
}

// Summary of the activity on a document or account.
message ActivitySummary {
  // Timestamp of the most recent comment.
  google.protobuf.Timestamp latest_comment_time = 1;

  // ID of the most recent comment.
  string latest_comment_id = 4;

  // Total number of comments.
  int32 comment_count = 2;

  // Timestamp of the most recent change.
  google.protobuf.Timestamp latest_change_time = 3;

  // Whether there's any unread activity on this document/account.
  bool is_unread = 5;
}

// Basic information about ancestor documents in the path hierarchy.
message Breadcrumb {
  // Title of the document.
  string name = 1;

  // Path of the document.
  string path = 2;

  // Will be true if we don't have any indexed information about this document.
  bool is_missing = 3;
}

// Document represents metadata and content of a document.
message Document {
  // Account to which the document belongs.
  string account = 1;

  // Path of the document within the account.
  // Empty string means root document.
  string path = 2;

  // Metadata values for a document.
  google.protobuf.Struct metadata = 3;

  // Output only. Every account ID who has modified the document.
  // Includes the original author as well.
  repeated string authors = 5;

  // Old header and footer fields.
  reserved 11, 12;

  // Blocks content of the document.
  repeated BlockNode content = 6;

  // Output only. Blocks that were created but not moved into the document content.
  map<string, BlockNode> detached_blocks = 14;

  // Output only. Time when document was created.
  google.protobuf.Timestamp create_time = 7;

  // Output only. Time when document was updated.
  google.protobuf.Timestamp update_time = 8;

  // Output only. ID of the genesis change of this document.
  string genesis = 9;

  // Output only. Current version of the document.
  string version = 10;

  // Information about the generation of the document.
  GenerationInfo generation_info = 13;
}

// Content block with children.
message BlockNode {
  // Content block.
  Block block = 1;

  // Child blocks.
  repeated BlockNode children = 2;
}

// Content block.
message Block {
  // Block ID. Must be unique within the document.
  string id = 1;

  // Type of the block. Specific to the renderer.
  string type = 2;

  // Text of the content block.
  string text = 3;

  // Optional. The hyperlink to an external resource.
  // Must be a valid URL.
  string link = 7;

  // Remaining type-specific attribtues of the block.
  // Logically, these attributes are on the same level as the other fields,
  // i.e. the field `attributes` should not exist,
  // but because protobuf doesn't support arbitrary fields, and we don't want/need
  // to specify the types of all the possible fields, we use this approach of storing
  // the rest of the fields in this open-ended attributes map.
  // The side-effect of this is that `attributes` map must not have any keys
  // that conflict with the names of the top-level fields.
  google.protobuf.Struct attributes = 4;

  // Annotation "layers" of the block.
  repeated Annotation annotations = 5;

  // Output only. Current revision of the block. It's the ID of the last Change that modified this block.
  // Additional information about the Change can be obtained using the Changes service.
  string revision = 6;
}

// Conceptual annotation "layer" that is applied to arbitrary spans of block text.
// An "identity" of the layer should be derived deterministically based on its type
// attributes. Spans inside the same annotation can't overlap.
//
// Spans are stored inside the Annotation in a "columnar" format,
// i.e. StructureOfArrays instead of ArrayOfStructures. See: https://en.wikipedia.org/wiki/AoS_and_SoA.
// This is useful to reduce the number of allocations and offers more compact serialization, because
// protobuf is able to "pack" primitive repeated fields more efficiently.
message Annotation {
  // Type of the annotation.
  string type = 1;

  // Optional. A hyperlink to an external resource.
  // Must be a valid URL.
  string link = 5;

  // Arbitrary key-value attributes of the annotation.
  google.protobuf.Struct attributes = 2;

  // Start offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `ends` list.
  repeated int32 starts = 3;

  // End offsets of possibly disjoint spans of text for which this annotation is applied.
  // Must be sorted and have the same number of items as `starts` list.
  repeated int32 ends = 4;
}

// Granular document change.
message DocumentChange {
  // Operation to move an existing block to a different place in the document.
  // Move and Create operations are both expressed with this.
  // Conceptually new blocks are moved out of nowhere into the document.
  message MoveBlock {
    // ID of the block to move.
    string block_id = 1;

    // ID of the new parent for the block being moved.
    string parent = 2;

    // ID of the new left sibling for the block being moved.
    string left_sibling = 3;
  }

  // Operation to replace a metadata field with a new value
  //
  // Deprecated: Use SetAttribute instead.
  message SetMetadata {
    // Metadata key to set.
    string key = 1;

    // Metadata value to set.
    string value = 2;
  }

  // Operation to set an attribute of a block or document.
  message SetAttribute {
    // ID of the block to set the attribute on.
    //
    // Empty string means the document itself.
    // Special strings "footer" and "header" can be used to set attributes on the document footer and header blocks.
    string block_id = 1;

    // A path of keys to set the value for.
    // It's a list to support nested attributes.
    repeated string key = 2;

    // Value to set.
    oneof value {
      string string_value = 3;

      int64 int_value = 4;

      bool bool_value = 5;

      google.protobuf.Empty null_value = 6;
    }
  }

  oneof op {
    // New metadata to set on the document.
    //
    // Deprecated: Use SetAttribute instead.
    SetMetadata set_metadata = 1;

    // Move operation that creates/moves a block within the document hierarchy.
    MoveBlock move_block = 2;

    // New block state that replaces an existing block.
    Block replace_block = 3;

    // ID of a block to delete.
    string delete_block = 4;

    // Sets an attribute on a block.
    SetAttribute set_attribute = 5;
  }
}

// Description of a Ref blob.
message Ref {
  // CID of the Ref blob.
  string id = 1;

  // Account (space) in which the Ref blob exists.
  string account = 2;

  // Path in the account Ref creates an entry for.
  string path = 3;

  // Description of where the Ref points to.
  RefTarget target = 4;

  // Public key used to sign the Ref blob.
  string signer = 5;

  // Optional. ID of the Capability attached to this Ref.
  string capability = 6;

  // Timestamp of the Ref.
  google.protobuf.Timestamp timestamp = 7;

  // Information about the generation of the Ref.
  GenerationInfo generation_info = 8;
}

// Description of where the Ref points to.
message RefTarget {
  // A Ref can point to one of the following targets.
  oneof target {
    // Version target describes genesis + head changes (version).
    Version version = 1;

    // Redirect target makes a Ref point to a different account + path.
    // Users must be careful to not create cycles or very deep redirect chains.
    // Client should be careful not to get stuck in redirects
    // by tracking visited paths to prevent cycles,
    // and by limiting the depth of the redirect chains,
    // while handling redirects.
    Redirect redirect = 2;

    // Tombstone Ref indicates the intent to delete the given account + path.
    Tombstone tombstone = 3;
  }

  message Version {
    // Required. ID of the genesis Change.
    string genesis = 1;

    // Required. Version ID (possibly compount).
    // Each change in the version ID must have the same genesis.
    string version = 2;
  }

  message Redirect {
    // Required. Account ID to which the Ref should redirect.
    // Can be the same as the account in the Ref itself,
    // when we redirect to a different path in the same account/space.
    string account = 1;

    // Required. Path to which the Ref should redirect.
    // Empty string means root document.
    // Must not be the same as the Ref itself.
    string path = 2;
  }

  message Tombstone {}
}
