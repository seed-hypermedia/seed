syntax = "proto3";

package com.seed.p2p.v1alpha;

import "google/protobuf/timestamp.proto";

option go_package = "seed/backend/genproto/p2p/v1alpha;p2p";

// Seed P2P API.
service P2P {
  // ListBlobs returns a stream of blobs that the peer has.
  // It's assumed that all peers have a way to list their blobs in a monotonic order,
  // i.e. blobs that a peer receives later will have a higher index/cursor.
  // This allows peers to sync more efficiently by remembering the cursor from the previous request,
  // and only asking for what's new since then in the next request.
  // Clients must treat the cursor as an opaque string.
  rpc ListBlobs(ListBlobsRequest) returns (stream Blob);

  // Lists other peers that are known by the peer.
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse);

  // Lists spaces that this peer can provide information about.
  rpc ListSpaces(ListSpacesRequest) returns (ListSpacesResponse);

  // Request a peer to issue a lightning BOLT-11 invoice
  rpc RequestInvoice(RequestInvoiceRequest) returns (RequestInvoiceResponse);
}

// Request to list blobs.
message ListBlobsRequest {
  // Optional. A cursor obtained from a previous request to resume the stream.
  string cursor = 1;
}

// Request to list te peer list.
message ListPeersRequest {
  // Optional. Maximum number of peers to return.
  int32 page_size = 1;

  // Optional. Page token to continue listing peers from.
  string page_token = 2;

  // Optional. Hash of the local peer list to reconciliate.
  string list_hash = 3;
}

// Request to list spaces.
message ListSpacesRequest {
  // How many items to return in the response.
  int32 page_size = 1;

  // Token to continue listing spaces from.
  // Sometimes, the server may decide that previously generated tokens are invalid,
  // and return the results from the beginning, as if no token was provided.
  // Callers should deduplicate the responses themselves if necessary, and always treat
  // the returned page tokens as the only source of truth.
  string page_token = 2;
}

// Response to list spaces.
// The order of items in the response is determined by the server,
// and it's expected to remain stable (i.e. mostly append-only).
// Callers should save the returned page
message ListSpacesResponse {
  // List of space IDs.
  repeated string spaces = 1;

  // Token for the next page.
  // Unlike most of our other APIs this field would always be there,
  // even if there are no more results to return.
  // This is done to let users cache the token and use it for periodically
  // polling for more results.
  // To actually check whether there's more data to fetch
  // callers should check the `has_more_results` field.
  // Basically, the `next_page_token` field here is like a cursor,
  // that users can store and continue fetching more results.
  string next_page_token = 2;

  // Whether there are more results to fetch.
  bool has_more_results = 3;
}

// Request Invoice request.
message RequestInvoiceRequest {
  // The invoice amount in satoshis
  int64 amount_sats = 1;

  // Required. The account we request this invoice from
  string account = 2;

  // Optional requested memo to be attached in the invoice
  string memo = 3;

  // True to request a hold invoice instead of a regular one. If true, then preimage_hash should be filled
  bool hold_invoice = 4;

  // Preimage hash of the requested hold invoice. If hold_invoice is set to false this field is skipped
  bytes preimage_hash = 5;
}

// Request invoice response
message RequestInvoiceResponse {
  // Text encoded BOLT-11 Invoice
  string pay_req = 1;
}

// Response to list peers.
message ListPeersResponse {
  // Peer information
  repeated PeerInfo peers = 1;

  // Token to continue listing peers from.
  string next_page_token = 2;
}

message Blob {
  // CID of the blob.
  bytes cid = 1;

  // Cursor can be used to resume the stream to get only newer blobs than this one.
  // Clients must not expect that all blobs will have a cursor (might be done as an optimization),
  // but whenever they see a cursor for a blob they have already processed, they should remember it for future requests.
  string cursor = 2;
}

// Various details about a known peer.
message PeerInfo {
  // Libp2p peer ID.
  string id = 1;

  // List of known multiaddrs of the peer.
  repeated string addrs = 2;

  // Connection status of our node with a remote peer.
  ConnectionStatus connection_status = 3;

  // When wthe peer updated its addresses for the last time.
  google.protobuf.Timestamp updated_at = 4;
}

// Indicates connection status of our node with a remote peer.
// Mimics libp2p connectedness.
enum ConnectionStatus {
  // NotConnected means no connection to peer, and no extra information (default).
  NOT_CONNECTED = 0;

  // Connected means has an open, live connection to peer.
  CONNECTED = 1;

  // CanConnect means recently connected to peer, terminated gracefully.
  CAN_CONNECT = 2;

  // CannotConnect means recently attempted connecting but failed to connect.
  // (should signal "made effort, failed").
  CANNOT_CONNECT = 3;

  // Limited means we have a transient connection to the peer, but aren't fully connected.
  LIMITED = 4;
}
