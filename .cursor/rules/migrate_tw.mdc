---
description: 
globs: 
alwaysApply: false
---
# Tamagui to Tailwind CSS Migration Guide

This guide helps migrate Tamagui components to Tailwind CSS based on patterns established in the codebase.

## Initial Setup (Reference)

The migration uses Tailwind CSS v4.1.8 with the following setup:
- `@tailwindcss/vite` plugin for Vite integration
- Custom CSS variables for theme consistency
- `clsx` and `tailwind-merge` for conditional styling
- `class-variance-authority` for component variants
- `lucide-react` for icons (replacing Tamagui icons)
- `@radix-ui` primitives for complex components

## 1. Component Replacements

### Layout Components
- `XStack` → `div` with `className="flex"`
- `YStack` → `div` with `className="flex flex-col"`
- `Stack` → `div` with appropriate flex classes
- `ScrollView` → `ScrollArea` from `@shm/ui/components/scroll-area`
- `View` → `div` (usually with additional classes)

### UI Components  
- `Button` → Custom Button component from `@shm/ui/button`
- `Text`/`SizableText` → Custom Text component from `@shm/ui/text`
- `Sheet` → `Drawer` from `@shm/ui/components/drawer` (uses vaul)
- Tamagui Tooltip → Radix UI Tooltip from `@shm/ui/components/tooltip`
- `Form` → Standard `<form>` element
- `Fieldset` → `<fieldset>` element with Tailwind classes

### Form Elements
- `Form.Trigger` → `<button type="submit">`
- `Label` → `@shm/ui/components/label` (Radix UI based)
- Form wrapper patterns:
  ```tsx
  // Old
  <Form onSubmit={handleSubmit(onSubmit)}>
    <YStack gap="$2">
  
  // New  
  <form onSubmit={handleSubmit(onSubmit)}>
    <div className="flex flex-col gap-2">
  ```

## 2. Styling Property Conversions

### Size & Layout
- `flex={1}` → `flex-1`
- `f={1}` → `flex-1`
- `width="100%"` → `w-full`
- `height="100%"` → `h-full`
- `maxWidth={300}` → `max-w-xs` or `max-w-[300px]`
- `minWidth={250}` → `min-w-[250px]`
- `overflow="hidden"` → `overflow-hidden`
- `overflow="auto"` → `overflow-auto`

### Spacing
- `padding="$2"` → `p-2`
- `paddingHorizontal="$4"` → `px-4`
- `paddingVertical="$3"` → `py-3`
- `margin="$2"` → `m-2`
- `marginBottom="$4"` → `mb-4`
- `gap="$3"` → `gap-3`
- Token mapping: `$1` → `1`, `$2` → `2`, `$3` → `3`, etc.

### Positioning & Display
- `position="absolute"` → `absolute`
- `position="relative"` → `relative`
- `position="fixed"` → `fixed`
- `zIndex="$zIndex.5"` → `z-[5]` or appropriate z-index
- `zi="$zIndex.9"` → `z-[900]` (use arbitrary values for Tamagui z-indices)

### Borders & Backgrounds
- `borderRadius="$3"` → `rounded-lg`
- `borderWidth={1}` → `border`
- `borderColor="$borderColor"` → `border-border`
- `bg="$background"` → `bg-background`
- `bg="$backgroundStrong"` → `bg-secondary`
- `backgroundColor="$color4"` → Use semantic color classes

### Opacity & Effects
- `opacity={0}` → `opacity-0`
- `opacity={1}` → `opacity-100`
- `animation="fast"` → `transition-all duration-200 ease-in-out`

## 3. Layout Properties

### Flexbox Alignment
- `jc="center"` → `justify-center`
- `jc="space-between"` → `justify-between`
- `jc="flex-end"` → `justify-end`
- `ai="center"` → `items-center`
- `ai="flex-start"` → `items-start`
- `alignSelf="center"` → `self-center`
- `alignItems="stretch"` → `items-stretch`

### Flex Direction & Wrap
- `flexDirection="row"` → `flex-row` 
- `flexDirection="column"` → `flex-col`
- `flexWrap="wrap"` → `flex-wrap`

## 4. Colors & Theme System

**CRITICAL RULE**: If you make a change to one `tailwind.css` file, you MUST make the same change to the other one (both `frontend/apps/web/app/tailwind.css` and `frontend/apps/desktop/src/tailwind.css`).

### Primary Color System
- **Brand/Primary**: The brand color (`--brand-5`) is mapped to `primary`
- `bg="$brand5"` → `bg-primary`
- `color="$brand5"` → `text-primary` 
- `borderColor="$brand5"` → `border-primary`

### Secondary Color System  
- **Brand11/Brand12 → Secondary**: Use `secondary` instead of `brand11`/`brand12` colors
- `bg="$brand11"` → `bg-secondary`
- `bg="$brand12"` → `bg-secondary`
- `color="$brand11"` → `text-secondary-foreground`

### Muted Color System
- **DO NOT use gray colors** - use `muted` or black/white opacity instead
- `color="$color9"` → `text-muted-foreground` (most common for de-emphasized text)
- `bg="$color4"` → `bg-muted`
- `borderColor="$color8"` → `border-muted`

### Neutral Colors with Opacity
**Instead of gray colors, use:**
- Light backgrounds: `bg-black/5` (light mode), `bg-white/10` (dark mode)
- Hover states: `hover:bg-black/10 dark:hover:bg-white/10`
- Active states: `active:bg-black/5 dark:active:bg-white/10`

```tsx
// Good - Responsive neutral colors
<div className="hover:bg-black/5 dark:hover:bg-white/10">

// Bad - Don't use gray
<div className="hover:bg-gray-100 dark:hover:bg-gray-800">
```

### Accent Color Usage
Based on codebase analysis, `accent` is used for:
- **Hover highlights**: `hover:bg-accent`
- **Active states**: `data-[state=open]:bg-accent`
- **Subtle selections**: `bg-accent` for active items
- **Loading states**: `bg-accent` for skeletons
- **Badge variants**: `hover:bg-accent hover:text-accent-foreground`

```tsx
// Common accent patterns
<div className="hover:bg-accent hover:text-accent-foreground">
<div className="bg-accent animate-pulse"> {/* skeleton */}
<button className={cn('p-2', active && 'bg-accent')}>
```

### Complete Color Mapping

#### Backgrounds
- `bg="$background"` → `bg-background`
- `bg="$backgroundStrong"` → `bg-secondary`
- `bg="$color4"` → `bg-muted`
- `bg="$brand5"` → `bg-primary`
- Neutral hover → `hover:bg-black/5 dark:hover:bg-white/10`

#### Text Colors
- `color="$color"` → `text-foreground`
- `color="$color9"` → `text-muted-foreground`
- `color="$brand5"` → `text-primary`
- `color="$red10"` → `text-destructive`

#### Borders
- `borderColor="$borderColor"` → `border-border`
- `borderColor="$color8"` → `border-muted`
- `borderColor="$brand5"` → `border-primary`

### Dark Mode Patterns
```tsx
// Common dark mode patterns  
"bg-white dark:bg-background"
"text-black dark:text-white"
"border-border" // automatically adapts
"hover:bg-black/5 dark:hover:bg-white/10"
```

### Color System Rules
1. **Primary = Brand**: Use `primary` for main brand color
2. **Secondary = Brand11/12**: Use `secondary` instead of brand11/brand12
3. **No Gray Colors**: Use `muted` or black/white opacity
4. **Muted for De-emphasis**: Use `text-muted-foreground` for secondary text
5. **Accent for Interactions**: Use `accent` for hover states and subtle highlights
6. **Sync Both Files**: Always update both tailwind.css files together

## 5. Conditional Styling with cn()

Use the `cn()` utility for conditional classes:

```tsx
import {cn} from '@shm/ui/utils'

// Simple conditional
<div className={cn('base-class', condition && 'conditional-class')} />

// Complex conditional  
<div className={cn(
  'base-classes',
  variant === 'primary' && 'bg-primary text-primary-foreground',
  variant === 'secondary' && 'bg-secondary text-secondary-foreground',
  disabled && 'opacity-50 cursor-not-allowed',
  className // Always spread className prop last
)} />

// With template literals for complex logic
<div className={cn(
  'flex items-center',
  expanded ? 'h-auto' : 'h-12',
  error ? 'border-destructive' : 'border-border'
)} />
```

## 6. Icon Migration

Replace Tamagui/Lucide imports with `lucide-react`:

```tsx
// Old
import {X, ChevronDown} from '@tamagui/lucide-icons'

// New  
import {X, ChevronDown} from 'lucide-react'

// Usage - add size classes
<X className="size-4" />  // 16px
<ChevronDown className="size-5" />  // 20px
```

## 7. Event Handling Migration

```tsx
// Old
<XStack onPress={() => doSomething()}>

// New
<div onClick={() => doSomething()}>

// Keep React events as-is
onClick, onSubmit, onChange, onFocus, onBlur, etc.
```

## 8. TypeScript Props Migration

```tsx
// Old
interface Props extends XStackProps {
  customProp?: boolean
}

// New
interface Props extends HTMLAttributes<HTMLDivElement> {
  customProp?: boolean  
}

// For forms
interface FormProps extends HTMLAttributes<HTMLFormElement> {
  // form-specific props
}

// Generic approach
interface Props extends ComponentProps<'div'> {
  // custom props
}
```

## 9. Import Updates

```tsx
// Remove Tamagui imports
// Old
import {XStack, YStack, Button, Text} from 'tamagui'
import {X} from '@tamagui/lucide-icons'

// New - Use UI components and standard elements
import {Button} from '@shm/ui/button'
import {Text} from '@shm/ui/text'  
import {X} from 'lucide-react'
import {cn} from '@shm/ui/utils'
```

## 10. Complex Component Patterns

### Modal/Sheet to Drawer Migration
```tsx
// Old
<Sheet snapPoints={[92]} modal open={isOpen}>
  <Sheet.Frame>
    <Sheet.ScrollView>
      {content}
    </Sheet.ScrollView>
  </Sheet.Frame>
</Sheet>

// New
<Drawer open={isOpen} onOpenChange={setIsOpen}>
  <DrawerContent>
    <div className="flex h-full flex-1 flex-col overflow-hidden">
      <DrawerHeader>{header}</DrawerHeader>
      <div className="flex flex-1 flex-col overflow-hidden">
        <ScrollArea>{content}</ScrollArea>
      </div>
    </div>
  </DrawerContent>
</Drawer>
```

### Avatar Component Migration
```tsx
// Old - Using Tamagui Stack
<XStack width={size} height={size} borderRadius={size}>

// New - Using custom UIAvatar  
<UIAvatar
  size={size}
  url={imageUrl}
  id={userId}
  label={name}
  className="additional-classes"
/>
```

## 11. Advanced Patterns

### Dynamic Styles
For dynamic values (runtine changes), use inline styles:
```tsx
// Dynamic width/height
<div style={{width: dynamicWidth, height: dynamicHeight}}>

// Mix with classes
<div 
  className="flex items-center"
  style={{fontSize: dynamicSize}}
/>
```

### Responsive Design
```tsx
// Mobile-first responsive
<div className="flex flex-col gap-2 sm:flex-row sm:gap-4">

// Hide/show at breakpoints  
<div className="hidden sm:block">
<div className="block sm:hidden">
```

### Component State Classes
```tsx
// Hover/focus states
<button className="hover:bg-accent focus:ring-2 focus:ring-ring">

// Group hover effects
<div className="group">
  <div className="opacity-0 group-hover:opacity-100">
</div>
```

### Form Field Migration Pattern
```tsx
// Old
<Fieldset>
  <Label>{label}</Label>
  <Input />
</Fieldset>

// New
<FormField name="fieldName" errors={errors} label={label}>
  <Input {...register('fieldName')} />
</FormField>
```

## 12. Migration Tips

1. **Start with layout**: Migrate XStack/YStack to flex containers first
2. **Use cn() consistently**: Always use the utility for conditional classes
3. **Preserve functionality**: Keep all event handlers and dynamic behavior
4. **Test dark mode**: Ensure dark mode variants work correctly
5. **Icon sizes**: Remember to add size classes to icons (`size-4`, `size-5`, etc.)
6. **Form semantics**: Use proper form elements (`form`, `fieldset`, `label`)
7. **Z-index mapping**: Convert Tamagui z-index tokens to arbitrary values

## Common Migration Examples

### Simple Layout Migration
```tsx
// Before
<YStack gap="$4" padding="$3" bg="$background">
  <XStack jc="space-between" ai="center">
    <Text>Title</Text>
    <Button>Action</Button>
  </XStack>
</YStack>

// After  
<div className="flex flex-col gap-4 p-3 bg-background">
  <div className="flex items-center justify-between">
    <Text>Title</Text>
    <Button>Action</Button>
  </div>
</div>
```

### Complex Component Migration
```tsx
// Before
<XStack 
  flex={1}
  bg="$color4" 
  borderRadius="$4"
  padding="$4"
  $hover={{bg: "$color5"}}
  onPress={handlePress}
>
  <Icon size={20} />
  <Text flex={1}>{text}</Text>
</XStack>

// After
<div 
  className="flex flex-1 items-center gap-3 rounded-lg bg-muted p-4 hover:bg-black/5 dark:hover:bg-white/10 cursor-pointer"
  onClick={handlePress}
>
  <Icon className="size-5" />
  <Text className="flex-1">{text}</Text>
</div>
```

This migration guide reflects the actual patterns used in the codebase migration and should help maintain consistency across the project.