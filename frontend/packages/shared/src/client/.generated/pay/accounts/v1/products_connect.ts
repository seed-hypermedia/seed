// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file pay/accounts/v1/products.proto (package accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateProductRequest, DeleteProductRequest, ListProductRequest, ListProductsResponse, Product, UpdateProductRequest } from "./products_pb";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * Products service provides functionality to create and manage account
 * products.
 *
 * @generated from service accounts.v1.Products
 */
export const Products = {
  typeName: "accounts.v1.Products",
  methods: {
    /**
     * Creates a product for the connected account. This product represents a
     * service that the connected account can offer to their customers.
     *
     * @generated from rpc accounts.v1.Products.CreateProduct
     */
    createProduct: {
      name: "CreateProduct",
      I: CreateProductRequest,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * Updates an existing product for the connected account.
     *
     * @generated from rpc accounts.v1.Products.UpdateProduct
     */
    updateProduct: {
      name: "UpdateProduct",
      I: UpdateProductRequest,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes a product for the connected account.
     * This will remove the product from the account and it will no longer be
     * available To sell to customers. The donation product cannot be deleted, but
     * it can be updated to change its properties.
     *
     * @generated from rpc accounts.v1.Products.DeleteProduct
     */
    deleteProduct: {
      name: "DeleteProduct",
      I: DeleteProductRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * List all products for the connected account.
     *
     * @generated from rpc accounts.v1.Products.ListProducts
     */
    listProducts: {
      name: "ListProducts",
      I: ListProductRequest,
      O: ListProductsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

