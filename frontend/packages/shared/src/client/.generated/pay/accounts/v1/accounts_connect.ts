// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file pay/accounts/v1/accounts.proto (package accounts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AccountBalanceResponse, AccountLinkRequest, AccountLinkResponse, AccountRequest, AccountResponse, AccountSessionRequest, AccountSessionResponse, CheckAccountsRequest, CheckAccountsResponse, ListTransactionsRequest, ListTransactionsResponse, NewAccountRequest } from "./accounts_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Accounts service provides functionality to create and manage user accounts.
 *
 * @generated from service accounts.v1.Accounts
 */
export const Accounts = {
  typeName: "accounts.v1.Accounts",
  methods: {
    /**
     * Creates a new connected account. This account should later be linked
     * to the platform so that the platform can route payments to users.
     * The caller must provide proof of ownership of the account uid by signing a
     * message with the private key associated with the account uid and attaching
     * the signature to the request. as a `signature` field. in the request
     * header.
     *
     * @generated from rpc accounts.v1.Accounts.NewAccount
     */
    newAccount: {
      name: "NewAccount",
      I: NewAccountRequest,
      O: AccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates an account session to be used with embedded components.
     * We recommend that you create a session each time one needs to display
     * an embedded component to the user. Do not save account sessions in any
     * database as they expire relatively quickly, and cannot be used more than
     * once.
     *
     * @generated from rpc accounts.v1.Accounts.CreateAccountSession
     */
    createAccountSession: {
      name: "CreateAccountSession",
      I: AccountSessionRequest,
      O: AccountSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates an account link to redirect the user to the payment provider's
     * platform.
     *
     * @generated from rpc accounts.v1.Accounts.CreateAccountLink
     */
    createAccountLink: {
      name: "CreateAccountLink",
      I: AccountLinkRequest,
      O: AccountLinkResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get a link for the Express dashboard to manage the account.
     * The caller must provide proof of ownership of the account uid by signing a
     * message with the private key associated with the account uid and attaching
     * the signature to the request as a `signature` field. in the request header.
     *
     * @generated from rpc accounts.v1.Accounts.GetDashboardCredentials
     */
    getDashboardCredentials: {
      name: "GetDashboardCredentials",
      I: AccountRequest,
      O: AccountLinkResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get an account information.
     *
     * @generated from rpc accounts.v1.Accounts.GetAccount
     */
    getAccount: {
      name: "GetAccount",
      I: AccountRequest,
      O: AccountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * Status service is unauthorized and
 * provides functionality to check the status of accounts.
 *
 * @generated from service accounts.v1.Status
 */
export const Status = {
  typeName: "accounts.v1.Status",
  methods: {
    /**
     * Check whether the accounts are valid and can be used.
     *
     * @generated from rpc accounts.v1.Status.CheckAccounts
     */
    checkAccounts: {
      name: "CheckAccounts",
      I: CheckAccountsRequest,
      O: CheckAccountsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service accounts.v1.Payments
 */
export const Payments = {
  typeName: "accounts.v1.Payments",
  methods: {
    /**
     * Get the balances of the account.
     * The caller must provide proof of ownership of the account uid by signing a
     * message with the private key associated with the account uid and attaching
     * the signature to the request as a `signature` field. in the request header.
     *
     * @generated from rpc accounts.v1.Payments.GetAccountBalance
     */
    getAccountBalance: {
      name: "GetAccountBalance",
      I: AccountRequest,
      O: AccountBalanceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List all transactions for the account. Both incoming and outgoing.
     *
     * @generated from rpc accounts.v1.Payments.ListTransactions
     */
    listTransactions: {
      name: "ListTransactions",
      I: ListTransactionsRequest,
      O: ListTransactionsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

