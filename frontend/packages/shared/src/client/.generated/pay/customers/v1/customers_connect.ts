// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file pay/customers/v1/customers.proto (package customers.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CheckoutSessionRequest, CheckoutSessionResponse, CustomerPortalSessionRequest, CustomerPortalSessionResponse, CustomerResponse, CustomerSessionRequest, CustomerSessionResponse, ListTransactionsRequest, NewCustomerRequest } from "./customers_pb";
import { MethodKind } from "@bufbuild/protobuf";
import { ListTransactionsResponse } from "../../accounts/v1/accounts_pb";

/**
 * Customers service provides functionality to create and manage customer
 * accounts. Even though customers hang from the platform, they have their own
 * api because the authorization and authentication of customers is different
 * from the platform itself.
 *
 * @generated from service customers.v1.Customers
 */
export const Customers = {
  typeName: "customers.v1.Customers",
  methods: {
    /**
     * Creates a new customer. Multiple calls with the same uid will
     * return the same customer. If the customer already exists, it will
     * update the customer with the provided name.
     *
     * @generated from rpc customers.v1.Customers.NewCustomer
     */
    newCustomer: {
      name: "NewCustomer",
      I: NewCustomerRequest,
      O: CustomerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a hostedcustomer session not to be used with embedded components.
     * This session can be used to redirect the user to a hosted page where they
     * can interact with the customer components. This session is used to display
     * a
     *
     * @generated from rpc customers.v1.Customers.CreateCustomerSession
     */
    createCustomerSession: {
      name: "CreateCustomerSession",
      I: CustomerSessionRequest,
      O: CustomerSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a customer portal session so that the customer can manage their
     * payment methods, view their payment history, and update their account
     * information. The customer portal is a web page that the customer can access
     * to manage their.
     *
     * @generated from rpc customers.v1.Customers.CreateCustomerPortalSession
     */
    createCustomerPortalSession: {
      name: "CreateCustomerPortalSession",
      I: CustomerPortalSessionRequest,
      O: CustomerPortalSessionResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service customers.v1.Payments
 */
export const Payments = {
  typeName: "customers.v1.Payments",
  methods: {
    /**
     * Creates a checkout session for the customer. This session can be used to
     * display a checkout page to the customer. The session will be valid for a
     * short period of time and can be used only once. After the session expires,
     * the user will need to create a new session to interact with the checkout
     * page.
     *
     * @generated from rpc customers.v1.Payments.CreateCheckoutSession
     */
    createCheckoutSession: {
      name: "CreateCheckoutSession",
      I: CheckoutSessionRequest,
      O: CheckoutSessionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List all transactions for the account. Both incoming and outgoing.
     *
     * @generated from rpc customers.v1.Payments.ListTransactions
     */
    listTransactions: {
      name: "ListTransactions",
      I: ListTransactionsRequest,
      O: ListTransactionsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

