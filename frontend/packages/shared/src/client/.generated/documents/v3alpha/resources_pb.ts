// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file documents/v3alpha/resources.proto (package com.seed.documents.v3alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Contact, Document } from "./documents_pb";
import { Comment } from "./comments_pb";

/**
 * Request to get a single resource by its IRI.
 *
 * @generated from message com.seed.documents.v3alpha.GetResourceRequest
 */
export class GetResourceRequest extends Message<GetResourceRequest> {
  /**
   * Required. IRI of the resource to retrieve.
   *
   * @generated from field: string iri = 1;
   */
  iri = "";

  constructor(data?: PartialMessage<GetResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v3alpha.GetResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "iri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined, b: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined): boolean {
    return proto3.util.equals(GetResourceRequest, a, b);
  }
}

/**
 * An identifiable entity, accessible with a unique identifier.
 *
 * @generated from message com.seed.documents.v3alpha.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * Various kinds of resources.
   *
   * @generated from oneof com.seed.documents.v3alpha.Resource.kind
   */
  kind: {
    /**
     * @generated from field: com.seed.documents.v3alpha.Document document = 1;
     */
    value: Document;
    case: "document";
  } | {
    /**
     * @generated from field: com.seed.documents.v3alpha.Comment comment = 2;
     */
    value: Comment;
    case: "comment";
  } | {
    /**
     * @generated from field: com.seed.documents.v3alpha.Contact contact = 3;
     */
    value: Contact;
    case: "contact";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.documents.v3alpha.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "document", kind: "message", T: Document, oneof: "kind" },
    { no: 2, name: "comment", kind: "message", T: Comment, oneof: "kind" },
    { no: 3, name: "contact", kind: "message", T: Contact, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

