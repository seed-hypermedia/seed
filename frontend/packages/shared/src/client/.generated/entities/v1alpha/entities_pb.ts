// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file entities/v1alpha/entities.proto (package com.seed.entities.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Describes the state of the discovery task.
 *
 * @generated from enum com.seed.entities.v1alpha.DiscoveryTaskState
 */
export enum DiscoveryTaskState {
  /**
   * The task has just started.
   *
   * @generated from enum value: DISCOVERY_TASK_STARTED = 0;
   */
  DISCOVERY_TASK_STARTED = 0,

  /**
   * The task is in progess â€” we keep looking for peers who can provide the content,
   * and downloading the content we are finding.
   *
   * @generated from enum value: DISCOVERY_TASK_IN_PROGRESS = 1;
   */
  DISCOVERY_TASK_IN_PROGRESS = 1,

  /**
   * The task has completed and the result is cached for the duration of the duration of the TTL.
   *
   * @generated from enum value: DISCOVERY_TASK_COMPLETED = 2;
   */
  DISCOVERY_TASK_COMPLETED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DiscoveryTaskState)
proto3.util.setEnumType(DiscoveryTaskState, "com.seed.entities.v1alpha.DiscoveryTaskState", [
  { no: 0, name: "DISCOVERY_TASK_STARTED" },
  { no: 1, name: "DISCOVERY_TASK_IN_PROGRESS" },
  { no: 2, name: "DISCOVERY_TASK_COMPLETED" },
]);

/**
 * Request to get a change by ID.
 *
 * @generated from message com.seed.entities.v1alpha.GetChangeRequest
 */
export class GetChangeRequest extends Message<GetChangeRequest> {
  /**
   * ID of the change.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.GetChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangeRequest {
    return new GetChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangeRequest | PlainMessage<GetChangeRequest> | undefined, b: GetChangeRequest | PlainMessage<GetChangeRequest> | undefined): boolean {
    return proto3.util.equals(GetChangeRequest, a, b);
  }
}

/**
 * Request to get the timeline of an entity.
 *
 * @generated from message com.seed.entities.v1alpha.GetEntityTimelineRequest
 */
export class GetEntityTimelineRequest extends Message<GetEntityTimelineRequest> {
  /**
   * The entity ID to get the timeline for.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Flag to include draft changes in the timeline,
   * otherwise they are omitted by default.
   *
   * @generated from field: bool include_drafts = 2;
   */
  includeDrafts = false;

  constructor(data?: PartialMessage<GetEntityTimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.GetEntityTimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "include_drafts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEntityTimelineRequest {
    return new GetEntityTimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEntityTimelineRequest {
    return new GetEntityTimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEntityTimelineRequest {
    return new GetEntityTimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEntityTimelineRequest | PlainMessage<GetEntityTimelineRequest> | undefined, b: GetEntityTimelineRequest | PlainMessage<GetEntityTimelineRequest> | undefined): boolean {
    return proto3.util.equals(GetEntityTimelineRequest, a, b);
  }
}

/**
 * Request to discover an entity.
 *
 * @generated from message com.seed.entities.v1alpha.DiscoverEntityRequest
 */
export class DiscoverEntityRequest extends Message<DiscoverEntityRequest> {
  /**
   * Required. The account the entity belongs to.
   *
   * @generated from field: string account = 1;
   */
  account = "";

  /**
   * Required. The path of the wanted entity.
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * Optional. Version of the entity to discover.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * Optional. If true, we sync the document and the child
   * documents as well.
   *
   * @generated from field: bool recursive = 4;
   */
  recursive = false;

  constructor(data?: PartialMessage<DiscoverEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.DiscoverEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "recursive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverEntityRequest {
    return new DiscoverEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverEntityRequest {
    return new DiscoverEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverEntityRequest {
    return new DiscoverEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverEntityRequest | PlainMessage<DiscoverEntityRequest> | undefined, b: DiscoverEntityRequest | PlainMessage<DiscoverEntityRequest> | undefined): boolean {
    return proto3.util.equals(DiscoverEntityRequest, a, b);
  }
}

/**
 * Response to discover an entity.
 *
 * @generated from message com.seed.entities.v1alpha.DiscoverEntityResponse
 */
export class DiscoverEntityResponse extends Message<DiscoverEntityResponse> {
  /**
   * The cached version of the document we've discovered within the last discovery process.
   *
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * The state of the discovery task.
   *
   * @generated from field: com.seed.entities.v1alpha.DiscoveryTaskState state = 2;
   */
  state = DiscoveryTaskState.DISCOVERY_TASK_STARTED;

  /**
   * The number of times we've called the discovery process for this entity and version so far.
   *
   * @generated from field: int32 call_count = 3;
   */
  callCount = 0;

  /**
   * The timestamp of the last result we've found.
   * It can be empty if the discovery is still in progress.
   *
   * @generated from field: google.protobuf.Timestamp last_result_time = 4;
   */
  lastResultTime?: Timestamp;

  /**
   * The cached error message of the last discovery attempt if it failed.
   *
   * @generated from field: string last_error = 5;
   */
  lastError = "";

  /**
   * The time when the currently cached result will expire, and a new discovery attempt will be made,
   * if the client keeps calling the discovery RPC.
   * Can be empty if no results have been found yet.
   *
   * @generated from field: google.protobuf.Timestamp result_expire_time = 6;
   */
  resultExpireTime?: Timestamp;

  constructor(data?: PartialMessage<DiscoverEntityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.DiscoverEntityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(DiscoveryTaskState) },
    { no: 3, name: "call_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "last_result_time", kind: "message", T: Timestamp },
    { no: 5, name: "last_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "result_expire_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoverEntityResponse {
    return new DiscoverEntityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoverEntityResponse {
    return new DiscoverEntityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoverEntityResponse {
    return new DiscoverEntityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoverEntityResponse | PlainMessage<DiscoverEntityResponse> | undefined, b: DiscoverEntityResponse | PlainMessage<DiscoverEntityResponse> | undefined): boolean {
    return proto3.util.equals(DiscoverEntityResponse, a, b);
  }
}

/**
 * A change to an entity.
 *
 * @generated from message com.seed.entities.v1alpha.Change
 */
export class Change extends Message<Change> {
  /**
   * ID of the change.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Author of the change.
   *
   * @generated from field: string author = 2;
   */
  author = "";

  /**
   * Timestamp when the change was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * IDs of other changes this change depends on.
   *
   * @generated from field: repeated string deps = 4;
   */
  deps: string[] = [];

  /**
   * IDs of other changes that depend on this change.
   *
   * @generated from field: repeated string children = 6;
   */
  children: string[] = [];

  /**
   * Indicates whether this changes comes from a trusted peer of ours.
   *
   * @generated from field: bool is_trusted = 5;
   */
  isTrusted = false;

  /**
   * Indicates whether this change is a draft.
   *
   * @generated from field: bool is_draft = 7;
   */
  isDraft = false;

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create_time", kind: "message", T: Timestamp },
    { no: 4, name: "deps", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "children", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "is_trusted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "is_draft", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * The timeline of an entity.
 *
 * @generated from message com.seed.entities.v1alpha.EntityTimeline
 */
export class EntityTimeline extends Message<EntityTimeline> {
  /**
   * The ID of the entity.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Account ID of the owner of the entity.
   *
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * The set of changes for the entity keyed by change ID.
   *
   * @generated from field: map<string, com.seed.entities.v1alpha.Change> changes = 3;
   */
  changes: { [key: string]: Change } = {};

  /**
   * The sorted list of change IDs by time.
   *
   * @generated from field: repeated string changes_by_time = 4;
   */
  changesByTime: string[] = [];

  /**
   * The set of changes that has no dependencies.
   * Normally there should only be one root,
   * but just in case it's defined as a list.
   *
   * @generated from field: repeated string roots = 5;
   */
  roots: string[] = [];

  /**
   * The set of leaf changes considering the entire DAG.
   *
   * @generated from field: repeated string heads = 6;
   */
  heads: string[] = [];

  /**
   * The set of author versions/variants sorted by timestamp.
   *
   * @generated from field: repeated com.seed.entities.v1alpha.AuthorVersion author_versions = 7;
   */
  authorVersions: AuthorVersion[] = [];

  constructor(data?: PartialMessage<EntityTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.EntityTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "changes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Change} },
    { no: 4, name: "changes_by_time", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "roots", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "heads", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "author_versions", kind: "message", T: AuthorVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityTimeline {
    return new EntityTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityTimeline {
    return new EntityTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityTimeline {
    return new EntityTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: EntityTimeline | PlainMessage<EntityTimeline> | undefined, b: EntityTimeline | PlainMessage<EntityTimeline> | undefined): boolean {
    return proto3.util.equals(EntityTimeline, a, b);
  }
}

/**
 * Set of heads from a given author.
 *
 * @generated from message com.seed.entities.v1alpha.AuthorVersion
 */
export class AuthorVersion extends Message<AuthorVersion> {
  /**
   * Account ID of the author.
   *
   * @generated from field: string author = 1;
   */
  author = "";

  /**
   * The set of leaf changes from that author.
   *
   * @generated from field: repeated string heads = 2;
   */
  heads: string[] = [];

  /**
   * The version string corresponding to the author's variant.
   * I.e. same as heads but concatenated with a '.' delimiter.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * The timestamp of the author's version.
   * For compound versions the greatest timestamp is used.
   *
   * @generated from field: google.protobuf.Timestamp version_time = 4;
   */
  versionTime?: Timestamp;

  constructor(data?: PartialMessage<AuthorVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.AuthorVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "heads", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorVersion {
    return new AuthorVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorVersion {
    return new AuthorVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorVersion {
    return new AuthorVersion().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorVersion | PlainMessage<AuthorVersion> | undefined, b: AuthorVersion | PlainMessage<AuthorVersion> | undefined): boolean {
    return proto3.util.equals(AuthorVersion, a, b);
  }
}

/**
 * An entity record found
 *
 * @generated from message com.seed.entities.v1alpha.Entity
 */
export class Entity extends Message<Entity> {
  /**
   * EID of the entity, including version, block id and range
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Blob Id of the resource containing the matching record.
   *
   * @generated from field: string blob_id = 2;
   */
  blobId = "";

  /**
   * The time of the version of the entity.
   *
   * @generated from field: google.protobuf.Timestamp version_time = 3;
   */
  versionTime?: Timestamp;

  /**
   * In the case of comments, the document id
   * containing the comment.
   *
   * @generated from field: string doc_id = 4;
   */
  docId = "";

  /**
   * Content of the entity, depending on the type:
   * Alias in the case of account.
   * Title/Body in the case of groups and documents.
   * Body in the case of comments. We don't fill up the whole
   * block, just the part that contains the search term, with
   * the surrounding context. The context size is defined by
   * the context_size parameter.
   *
   * @generated from field: string content = 5;
   */
  content = "";

  /**
   * The owner of the entity
   *
   * @generated from field: string owner = 6;
   */
  owner = "";

  /**
   * The type of the entity it coud be Title, Document, Comment, ...
   *
   * @generated from field: string type = 7;
   */
  type = "";

  /**
   * Icon of the document containing that entity
   *
   * @generated from field: string icon = 8;
   */
  icon = "";

  /**
   * Parent document names
   *
   * @generated from field: repeated string parent_names = 9;
   */
  parentNames: string[] = [];

  /**
   * Metadata of the document containing that entity.
   *
   * @generated from field: string metadata = 10;
   */
  metadata = "";

  constructor(data?: PartialMessage<Entity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.Entity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blob_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version_time", kind: "message", T: Timestamp },
    { no: 4, name: "doc_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "parent_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity {
    return new Entity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJsonString(jsonString, options);
  }

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean {
    return proto3.util.equals(Entity, a, b);
  }
}

/**
 * Publication that has been deleted
 *
 * @generated from message com.seed.entities.v1alpha.DeletedEntity
 */
export class DeletedEntity extends Message<DeletedEntity> {
  /**
   * EID of the deleted entity.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * When the entity was deleted.
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 2;
   */
  deleteTime?: Timestamp;

  /**
   * Reason why this entity was deleted.
   *
   * @generated from field: string deleted_reason = 3;
   */
  deletedReason = "";

  /**
   * Further metadata about the deleted entity, title, etc ...
   *
   * @generated from field: string metadata = 4;
   */
  metadata = "";

  constructor(data?: PartialMessage<DeletedEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.DeletedEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "delete_time", kind: "message", T: Timestamp },
    { no: 3, name: "deleted_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletedEntity {
    return new DeletedEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletedEntity {
    return new DeletedEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletedEntity {
    return new DeletedEntity().fromJsonString(jsonString, options);
  }

  static equals(a: DeletedEntity | PlainMessage<DeletedEntity> | undefined, b: DeletedEntity | PlainMessage<DeletedEntity> | undefined): boolean {
    return proto3.util.equals(DeletedEntity, a, b);
  }
}

/**
 * Request to
 *
 * @generated from message com.seed.entities.v1alpha.SearchEntitiesRequest
 */
export class SearchEntitiesRequest extends Message<SearchEntitiesRequest> {
  /**
   * Query to find. We Ssupport wildcards and phrases.
   * See https://sqlite.org/fts5.html#full_text_query_syntax.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * Whether to look into all content available or just the titles.
   * If false, comments are not included in the search.
   * Default is false.
   *
   * @generated from field: bool include_body = 2;
   */
  includeBody = false;

  /**
   * Optional. The size of the text accompanying the search match.
   * Half of the size is before the match, and half after.
   * Default is 48 runes.
   *
   * @generated from field: int32 context_size = 3;
   */
  contextSize = 0;

  /**
   * Optional. The account uid to filter the search by.
   * If not set, the search will be performed across all accounts.
   *
   * @generated from field: string account_uid = 4;
   */
  accountUid = "";

  /**
   * Optional. The account uid the user is logged in with.
   * This is used to filter out contacts that the user doesn't have access to.
   * If not set, we won't provide any contact entities in the response.
   *
   * @generated from field: string logged_account_uid = 5;
   */
  loggedAccountUid = "";

  constructor(data?: PartialMessage<SearchEntitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.SearchEntitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "include_body", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "context_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "account_uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "logged_account_uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchEntitiesRequest {
    return new SearchEntitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchEntitiesRequest {
    return new SearchEntitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchEntitiesRequest {
    return new SearchEntitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchEntitiesRequest | PlainMessage<SearchEntitiesRequest> | undefined, b: SearchEntitiesRequest | PlainMessage<SearchEntitiesRequest> | undefined): boolean {
    return proto3.util.equals(SearchEntitiesRequest, a, b);
  }
}

/**
 * A list of entities matching the request.
 *
 * @generated from message com.seed.entities.v1alpha.SearchEntitiesResponse
 */
export class SearchEntitiesResponse extends Message<SearchEntitiesResponse> {
  /**
   * Entities matching the input title
   *
   * @generated from field: repeated com.seed.entities.v1alpha.Entity entities = 1;
   */
  entities: Entity[] = [];

  /**
   * Token for the next page if there's any.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchEntitiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.SearchEntitiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entities", kind: "message", T: Entity, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchEntitiesResponse {
    return new SearchEntitiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchEntitiesResponse {
    return new SearchEntitiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchEntitiesResponse {
    return new SearchEntitiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchEntitiesResponse | PlainMessage<SearchEntitiesResponse> | undefined, b: SearchEntitiesResponse | PlainMessage<SearchEntitiesResponse> | undefined): boolean {
    return proto3.util.equals(SearchEntitiesResponse, a, b);
  }
}

/**
 * Request for deleting an entity.
 *
 * @generated from message com.seed.entities.v1alpha.DeleteEntityRequest
 */
export class DeleteEntityRequest extends Message<DeleteEntityRequest> {
  /**
   * Entity ID of the entity to be removed.
   * All versions will also be removed.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Optional. Reason why the user wants to delete that entity.
   *
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<DeleteEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.DeleteEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEntityRequest {
    return new DeleteEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEntityRequest {
    return new DeleteEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEntityRequest {
    return new DeleteEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEntityRequest | PlainMessage<DeleteEntityRequest> | undefined, b: DeleteEntityRequest | PlainMessage<DeleteEntityRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEntityRequest, a, b);
  }
}

/**
 * Request for listing deleted entities.
 *
 * @generated from message com.seed.entities.v1alpha.ListDeletedEntitiesRequest
 */
export class ListDeletedEntitiesRequest extends Message<ListDeletedEntitiesRequest> {
  /**
   * Optional. Number of results per page. Default is defined by the server.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * Optional. Value from next_page_token obtains from a previous response.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListDeletedEntitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.ListDeletedEntitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDeletedEntitiesRequest {
    return new ListDeletedEntitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDeletedEntitiesRequest {
    return new ListDeletedEntitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDeletedEntitiesRequest {
    return new ListDeletedEntitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDeletedEntitiesRequest | PlainMessage<ListDeletedEntitiesRequest> | undefined, b: ListDeletedEntitiesRequest | PlainMessage<ListDeletedEntitiesRequest> | undefined): boolean {
    return proto3.util.equals(ListDeletedEntitiesRequest, a, b);
  }
}

/**
 * Response with list of deleted entities.
 *
 * @generated from message com.seed.entities.v1alpha.ListDeletedEntitiesResponse
 */
export class ListDeletedEntitiesResponse extends Message<ListDeletedEntitiesResponse> {
  /**
   * List of deleted entities.
   *
   * @generated from field: repeated com.seed.entities.v1alpha.DeletedEntity deleted_entities = 1;
   */
  deletedEntities: DeletedEntity[] = [];

  /**
   * Token for the next page if there're more results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDeletedEntitiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.ListDeletedEntitiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deleted_entities", kind: "message", T: DeletedEntity, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDeletedEntitiesResponse {
    return new ListDeletedEntitiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDeletedEntitiesResponse {
    return new ListDeletedEntitiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDeletedEntitiesResponse {
    return new ListDeletedEntitiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDeletedEntitiesResponse | PlainMessage<ListDeletedEntitiesResponse> | undefined, b: ListDeletedEntitiesResponse | PlainMessage<ListDeletedEntitiesResponse> | undefined): boolean {
    return proto3.util.equals(ListDeletedEntitiesResponse, a, b);
  }
}

/**
 * Request for restoring an entity.
 *
 * @generated from message com.seed.entities.v1alpha.UndeleteEntityRequest
 */
export class UndeleteEntityRequest extends Message<UndeleteEntityRequest> {
  /**
   * Entity ID of the entity to be restored.
   * All versions will also be restored.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UndeleteEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.UndeleteEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteEntityRequest {
    return new UndeleteEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteEntityRequest {
    return new UndeleteEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteEntityRequest {
    return new UndeleteEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteEntityRequest | PlainMessage<UndeleteEntityRequest> | undefined, b: UndeleteEntityRequest | PlainMessage<UndeleteEntityRequest> | undefined): boolean {
    return proto3.util.equals(UndeleteEntityRequest, a, b);
  }
}

/**
 * Request to list mentions of an entity.
 *
 * @generated from message com.seed.entities.v1alpha.ListEntityMentionsRequest
 */
export class ListEntityMentionsRequest extends Message<ListEntityMentionsRequest> {
  /**
   * Required. ID of the entity to list mentions for.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Optional. The size of the page to return by the server.
   * The server may ignore this, and return a bigger response.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Optional. The page token to continue the pagination.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * Optional. Whether to return the results in descending order (newest-first).
   * By default mentions are listed in the chronological order,
   * according to the *locally perceived* order of the blobs that contain the mentions.
   *
   * I.e. we sort the links according to the time we receive the blobs, not according to the time blobs claim to have been created.
   * This is to prevent losing new mentions in case of receiving out-of-date blobs.
   *
   * This flag must remain the same when paginating through the results.
   *
   * @generated from field: bool reverse_order = 4;
   */
  reverseOrder = false;

  constructor(data?: PartialMessage<ListEntityMentionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.ListEntityMentionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse_order", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntityMentionsRequest {
    return new ListEntityMentionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntityMentionsRequest {
    return new ListEntityMentionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntityMentionsRequest {
    return new ListEntityMentionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntityMentionsRequest | PlainMessage<ListEntityMentionsRequest> | undefined, b: ListEntityMentionsRequest | PlainMessage<ListEntityMentionsRequest> | undefined): boolean {
    return proto3.util.equals(ListEntityMentionsRequest, a, b);
  }
}

/**
 * Response to list mentions of an entity.
 *
 * @generated from message com.seed.entities.v1alpha.ListEntityMentionsResponse
 */
export class ListEntityMentionsResponse extends Message<ListEntityMentionsResponse> {
  /**
   * Required. The list of mentions for the entity.
   *
   * @generated from field: repeated com.seed.entities.v1alpha.Mention mentions = 1;
   */
  mentions: Mention[] = [];

  /**
   * Optional. Token for the next page if there's any.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListEntityMentionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.ListEntityMentionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mentions", kind: "message", T: Mention, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEntityMentionsResponse {
    return new ListEntityMentionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEntityMentionsResponse {
    return new ListEntityMentionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEntityMentionsResponse {
    return new ListEntityMentionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEntityMentionsResponse | PlainMessage<ListEntityMentionsResponse> | undefined, b: ListEntityMentionsResponse | PlainMessage<ListEntityMentionsResponse> | undefined): boolean {
    return proto3.util.equals(ListEntityMentionsResponse, a, b);
  }
}

/**
 * Mention of an Entity.
 * Source means the place where the mention was found.
 * Target means the entity being mentioned.
 *
 * @generated from message com.seed.entities.v1alpha.Mention
 */
export class Mention extends Message<Mention> {
  /**
   * Required. The source blob where the mention was found.
   *
   * @generated from field: string source = 1;
   */
  source = "";

  /**
   * Required. The Type of the source where the mention was found.
   *
   * @generated from field: string source_type = 2;
   */
  sourceType = "";

  /**
   * Required. Context can mean different things depending on the type of the source:
   * it can be the block ID when source type is a Document or Comment,
   * it can be a pretty-path when source type is a Group that mentions a Document.
   *
   * @generated from field: string source_context = 3;
   */
  sourceContext = "";

  /**
   * Required. Information about the blob where the mention was found.
   *
   * @generated from field: com.seed.entities.v1alpha.Mention.BlobInfo source_blob = 4;
   */
  sourceBlob?: Mention_BlobInfo;

  /**
   * Required. Specifies whether the link points to the exact/pinned version of the target document,
   * or if the target version is a *suggested* minimum version, and a later one should be preferred if exists.
   *
   * @generated from field: bool is_exact_version = 5;
   */
  isExactVersion = false;

  /**
   * Optional. Specifies the document where the mention was found. Relevant for comments.
   *
   * @generated from field: string source_document = 6;
   */
  sourceDocument = "";

  /**
   * Optional. The version of the target Entity the link points to,
   * if one is specified in the link.
   *
   * @generated from field: string target_version = 7;
   */
  targetVersion = "";

  /**
   * Optional. The fragment portion of the link.
   *
   * @generated from field: string target_fragment = 8;
   */
  targetFragment = "";

  constructor(data?: PartialMessage<Mention>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.Mention";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "source_context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "source_blob", kind: "message", T: Mention_BlobInfo },
    { no: 5, name: "is_exact_version", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "source_document", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "target_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "target_fragment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mention {
    return new Mention().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mention {
    return new Mention().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mention {
    return new Mention().fromJsonString(jsonString, options);
  }

  static equals(a: Mention | PlainMessage<Mention> | undefined, b: Mention | PlainMessage<Mention> | undefined): boolean {
    return proto3.util.equals(Mention, a, b);
  }
}

/**
 * Information about a structural blob that contains the mention.
 *
 * @generated from message com.seed.entities.v1alpha.Mention.BlobInfo
 */
export class Mention_BlobInfo extends Message<Mention_BlobInfo> {
  /**
   * The CID-formatted hash of the blob.
   *
   * @generated from field: string cid = 1;
   */
  cid = "";

  /**
   * The Account ID of the author of the blob.
   *
   * @generated from field: string author = 2;
   */
  author = "";

  /**
   * The timestamp of the blob.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  constructor(data?: PartialMessage<Mention_BlobInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.entities.v1alpha.Mention.BlobInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mention_BlobInfo {
    return new Mention_BlobInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mention_BlobInfo {
    return new Mention_BlobInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mention_BlobInfo {
    return new Mention_BlobInfo().fromJsonString(jsonString, options);
  }

  static equals(a: Mention_BlobInfo | PlainMessage<Mention_BlobInfo> | undefined, b: Mention_BlobInfo | PlainMessage<Mention_BlobInfo> | undefined): boolean {
    return proto3.util.equals(Mention_BlobInfo, a, b);
  }
}

