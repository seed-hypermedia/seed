// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file activity/v1alpha/subscriptions.proto (package com.seed.activity.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * State describes the subscription type.
 *
 * @generated from enum com.seed.activity.v1alpha.Type
 */
export enum Type {
  /**
   * Document Subscription. Any changes on the document will be fetched
   *
   * @generated from enum value: DOCUMENT = 0;
   */
  DOCUMENT = 0,

  /**
   * Space subscription. Any change in any document from that space
   * will be fetched.
   *
   * @generated from enum value: SPACE = 1;
   */
  SPACE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Type)
proto3.util.setEnumType(Type, "com.seed.activity.v1alpha.Type", [
  { no: 0, name: "DOCUMENT" },
  { no: 1, name: "SPACE" },
]);

/**
 * Subscribe to a resource
 *
 * @generated from message com.seed.activity.v1alpha.SubscribeRequest
 */
export class SubscribeRequest extends Message<SubscribeRequest> {
  /**
   * Required. Entity ID of the resource to be subscribed to. 
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<SubscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.activity.v1alpha.SubscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined, b: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeRequest, a, b);
  }
}

/**
 * Subscribe to a resource
 *
 * @generated from message com.seed.activity.v1alpha.UnsubscribeRequest
 */
export class UnsubscribeRequest extends Message<UnsubscribeRequest> {
  /**
   * Required. Id of the resource to be unsubscribe to. 
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<UnsubscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.activity.v1alpha.UnsubscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeRequest {
    return new UnsubscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeRequest {
    return new UnsubscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeRequest {
    return new UnsubscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeRequest | PlainMessage<UnsubscribeRequest> | undefined, b: UnsubscribeRequest | PlainMessage<UnsubscribeRequest> | undefined): boolean {
    return proto3.util.equals(UnsubscribeRequest, a, b);
  }
}

/**
 * Get a list of active subscriptions.
 *
 * @generated from message com.seed.activity.v1alpha.ListSubscriptionsRequest
 */
export class ListSubscriptionsRequest extends Message<ListSubscriptionsRequest> {
  /**
   * Optional. The size of the page. The default is defined by the server.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * Optional. The page token for requesting next pages.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListSubscriptionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.activity.v1alpha.ListSubscriptionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubscriptionsRequest {
    return new ListSubscriptionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubscriptionsRequest {
    return new ListSubscriptionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubscriptionsRequest {
    return new ListSubscriptionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSubscriptionsRequest | PlainMessage<ListSubscriptionsRequest> | undefined, b: ListSubscriptionsRequest | PlainMessage<ListSubscriptionsRequest> | undefined): boolean {
    return proto3.util.equals(ListSubscriptionsRequest, a, b);
  }
}

/**
 * Get a list of active subscriptions.
 *
 * @generated from message com.seed.activity.v1alpha.ListSubscriptionsResponse
 */
export class ListSubscriptionsResponse extends Message<ListSubscriptionsResponse> {
  /**
   * The list of subscriptions.
   *
   * @generated from field: repeated com.seed.activity.v1alpha.Subscription subscriptions = 1;
   */
  subscriptions: Subscription[] = [];

  /**
   * The token to request the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListSubscriptionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.activity.v1alpha.ListSubscriptionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscriptions", kind: "message", T: Subscription, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubscriptionsResponse {
    return new ListSubscriptionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubscriptionsResponse {
    return new ListSubscriptionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubscriptionsResponse {
    return new ListSubscriptionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSubscriptionsResponse | PlainMessage<ListSubscriptionsResponse> | undefined, b: ListSubscriptionsResponse | PlainMessage<ListSubscriptionsResponse> | undefined): boolean {
    return proto3.util.equals(ListSubscriptionsResponse, a, b);
  }
}

/**
 * Description of the subscription item.
 *
 * @generated from message com.seed.activity.v1alpha.Subscription
 */
export class Subscription extends Message<Subscription> {
  /**
   * The ID of the subscribed resource.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The Type of subscription
   *
   * @generated from field: com.seed.activity.v1alpha.Type type = 2;
   */
  type = Type.DOCUMENT;

  /**
   * Timestamp when the user started the subscrition.
   *
   * @generated from field: google.protobuf.Timestamp since = 3;
   */
  since?: Timestamp;

  constructor(data?: PartialMessage<Subscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.seed.activity.v1alpha.Subscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Type) },
    { no: 3, name: "since", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription {
    return new Subscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription | PlainMessage<Subscription> | undefined, b: Subscription | PlainMessage<Subscription> | undefined): boolean {
    return proto3.util.equals(Subscription, a, b);
  }
}

