name: Dev - Desktop App

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    # Run at 8:00 AM UTC on every weekday (Monday through Friday)
    - cron: "0 8 * * 1-5"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1

jobs:
  build-info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Version
        id: set_version
        run: |
          node scripts/generate-dev-version.mjs --debug
          VERSION=$(node scripts/generate-dev-version.mjs)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Display Version
        run: |
          echo "App Version: ${{ steps.set_version.outputs.version }}"

  frontend-tests:
    runs-on: ubuntu-latest
    needs: [build-info]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Validate Code Formatting
        run: yarn format:check
      - name: Run tests
        run: yarn test

  build-binaries:
    timeout-minutes: 30
    name: Build ${{ matrix.config.os }} @ ${{ matrix.config.arch }}
    runs-on: ${{ matrix.config.os }}
    # if: startsWith(github.ref, 'refs/tags/')
    needs: [build-info, frontend-tests]
    strategy:
      matrix:
        config:
          - os: macos-13-large
            arch: x64
            goarch: amd64
            daemon_name: x86_64-apple-darwin
          - os: macos-13-xlarge
            arch: arm64
            goarch: arm64
            daemon_name: aarch64-apple-darwin
          - os: ubuntu-latest
            arch: x64
            goarch: amd64
            daemon_name: x86_64-unknown-linux-gnu
          - os: windows-latest
            arch: x64
            goarch: amd64
            daemon_name: x86_64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/ci-setup
        with:
          matrix-os: ${{ matrix.config.os }}
          # matrix-target: ${{ matrix.config.daemon_name }}
          # matrix-arch: ${{ matrix.config.arch }}

      - name: Build Backend (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/seed-daemon-${{ matrix.config.daemon_name }} ./backend/cmd/seed-daemon
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1

      - name: Build Backend (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/seed-daemon-${{ matrix.config.daemon_name }}.exe ./backend/cmd/seed-daemon
        env:
          GOOS: "windows"
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1

      - name: Set MacOS signing certs
        if: startsWith(matrix.config.os, 'macos')
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $APPLE_KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $APPLE_KEYCHAIN_PASSWORD build.keychain
          security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k $APPLE_KEYCHAIN_PASSWORD build.keychain
          rm -fr *.p12
          security set-keychain-settings -lut 1200 # prevent the keychain to get locked before codesign is done

      - name: Set temporal version in package.json
        run: |
          node scripts/set-desktop-version.mjs
        env:
          VITE_VERSION: "${{ needs.build-info.outputs.version }}"
      - name: Build, package & make (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          yarn desktop:publish --arch=${{ matrix.config.arch }}
        env:
          timeout-minutes: 10
          DEBUG: electron-*
          NODE_OPTIONS: --max_old_space_size=4096
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          DAEMON_NAME: ${{ matrix.config.daemon_name }}
          VITE_VERSION: "${{ needs.build-info.outputs.version }}"
          VITE_COMMIT_HASH: "${{ github.sha }}"
          VITE_DESKTOP_P2P_PORT: "57000"
          VITE_DESKTOP_HTTP_PORT: "57001"
          VITE_DESKTOP_GRPC_PORT: "57002"
          VITE_METRIC_SERVER_HTTP_PORT: "57003"
          VITE_DESKTOP_APPDATA: "Seed-dev"
          VITE_DESKTOP_HOSTNAME: "http://localhost"
          VITE_LIGHTNING_API_URL: "https://ln.testnet.seed.hyper.media"
          VITE_SEED_HOST_URL: "https://host-dev.seed.hyper.media"
          VITE_GATEWAY_URL: "https://dev.hyper.media"
          VITE_DESKTOP_SENTRY_DSN: "${{ secrets.DESKTOP_SENTRY_DSN }}"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SEED_P2P_TESTNET_NAME: "dev"

      - name: Clean up problematic RELEASES file (Windows)
        if: startsWith(matrix.config.os, 'windows')
        shell: bash
        run: |
          # Clean up .nupkg files from S3 to force a fresh start
          aws s3 rm s3://seedappdev/dev/win32/x64/ --recursive --exclude "*" --include "*.nupkg" || echo "No .nupkg files found, continuing..."
          # Create an empty RELEASES file
          touch RELEASES
          aws s3 cp RELEASES s3://seedappdev/dev/win32/x64/RELEASES || echo "Failed to upload empty RELEASES file, continuing..."
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_DEFAULT_REGION: eu-west-2

      - name: Build, package and make (Win32)
        if: startsWith(matrix.config.os, 'windows')
        shell: powershell
        run: |
          # Clear any existing out directory to force a clean build
          if (Test-Path "frontend/apps/desktop/out") { Remove-Item -Recurse -Force "frontend/apps/desktop/out" }
          yarn desktop:publish --arch=${{ matrix.config.arch }}
        env:
          timeout-minutes: 10
          DEBUG: electron-*
          NODE_OPTIONS: --max_old_space_size=4096
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          DAEMON_NAME: "${{ matrix.config.daemon_name }}.exe"
          VITE_VERSION: "${{ needs.build-info.outputs.version }}"
          VITE_COMMIT_HASH: "${{ github.sha }}"
          VITE_DESKTOP_P2P_PORT: "57000"
          VITE_DESKTOP_HTTP_PORT: "57001"
          VITE_DESKTOP_GRPC_PORT: "57002"
          VITE_METRIC_SERVER_HTTP_PORT: "57003"
          VITE_DESKTOP_APPDATA: "Seed-dev"
          VITE_DESKTOP_HOSTNAME: "http://localhost"
          VITE_LIGHTNING_API_URL: "https://ln.testnet.seed.hyper.media"
          VITE_SEED_HOST_URL: "https://host-dev.seed.hyper.media"
          VITE_GATEWAY_URL: "https://dev.hyper.media"
          VITE_DESKTOP_SENTRY_DSN: "${{ secrets.DESKTOP_SENTRY_DSN }}"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_DEFAULT_REGION: eu-west-2
          SEED_P2P_TESTNET_NAME: "dev"

      # - name: Sign Windows application with KeyLocker
      #   if: startsWith(matrix.config.os, 'windows')
      #   uses: digicert/keylocker-signing@v1
      #   with:
      #     api_key: ${{ secrets.KEYLOCKER_API_KEY }}
      #     client_cert: ${{ secrets.KEYLOCKER_CERT }}
      #     client_cert_password: ${{ secrets.KEYLOCKER_CERT_PASSWORD }}
      #     keypair_alias: ${{ secrets.KEYLOCKER_KEYPAIR_ALIAS }}
      #     input_file: frontend/apps/desktop/out/make/squirrel.windows/x64/seed-dev-${{ needs.build-info.outputs.version }}-win32-x64-setup.exe
      #     timestamp_url: http://timestamp.digicert.com

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.config.daemon_name }}
          path: frontend/apps/desktop/out/make/**/*

  notify-on-discord:
    needs: [build-info, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Step 3: Generate artifact URLs and send to Discord
      - name: Send Discord Notification
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          VERSION: ${{ needs.build-info.outputs.version }}
        run: |
          # Debug: List all files in artifacts directory
          echo "Listing all files in artifacts directory:"
          find artifacts -type f -ls

          # Get the GitHub Action Run URL base
          BASE_URL="https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest"

          # # Performance dashboard URL
          # DASHBOARD_URL="https://seedappdev.s3.eu-west-2.amazonaws.com/performance-dashboard/latest/index.html"

          # List all artifacts and construct URLs
          MESSAGE="**New dev version: ${VERSION}**"
          for file in $(find artifacts -type f); do
            FILE_NAME=$(basename "$file")
            ARTIFACT_URL="${BASE_URL}/${FILE_NAME}"
            MESSAGE="${MESSAGE}\n - [${FILE_NAME}](${ARTIFACT_URL})"
          done

          # # Add performance dashboard link
          # MESSAGE="${MESSAGE}\n\n**[View Performance Dashboard](${DASHBOARD_URL})**"
          # MESSAGE="${MESSAGE}\n(Performance results for this build will be available in the dashboard soon)"

          # Send the message to Discord
          echo "Sending Discord Notification..."
          PAYLOAD=$(printf '{"content": "%s"}' "$MESSAGE")
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"

      - name: Generate and upload latest.json (Dev)
        env:
          VERSION: ${{ needs.build-info.outputs.version }}
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_DEFAULT_REGION: eu-west-2
        run: |
          # Create the JSON structure
          cat > latest.json << EOF
          {
            "name": "${VERSION}",
            "tag_name": "${VERSION}",
            "release_notes": "Development build ${VERSION}",
            "assets": {
              "linux": {
                "deb": {
                  "download_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/seed-dev_${VERSION}_amd64.deb"
                },
                "rpm": {
                  "download_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/seed-dev-${VERSION}-1.x86_64.rpm"
                }
              },
              "macos": {
                "x64": {
                  "download_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/SeedDev-${VERSION}-x64.dmg",
                  "zip_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/SeedDev-darwin-x64-${VERSION}.zip"
                },
                "arm64": {
                  "download_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/SeedDev-${VERSION}-arm64.dmg",
                  "zip_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/SeedDev-darwin-arm64-${VERSION}.zip"
                }
              },
              "win32": {
                "x64": {
                  "download_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/seed-dev-${VERSION}-win32-x64-setup.exe",
                  "nupkg_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/seed-dev-${VERSION}-full.nupkg",
                  "release_url": "https://seedappdev.s3.eu-west-2.amazonaws.com/dev/latest/RELEASES"
                }
              }
            }
          }
          EOF

          # Upload to S3
          aws s3 cp latest.json s3://seedappdev/dev/latest.json
