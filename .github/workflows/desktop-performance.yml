name: Desktop Performance Metrics

permissions:
  contents: write

on:
  # schedule:
  # Run at 8:00 AM UTC on every weekday (Monday through Friday)
  # - cron: "0 8 * * 1-5"
  workflow_dispatch:
    # Manual trigger with options
    inputs:
      scenarios:
        description: "Specific scenarios to run (comma-separated, leave empty for all)"
        required: false
        default: ""
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - "frontend/apps/desktop/**"
  #     - "frontend/apps/performance/**"
  #     - "frontend/apps/performance-dashboard/**"
  #     - "frontend/packages/**"

env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: electron-app-performance-metrics

jobs:
  build-info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Version
        id: set_version
        run: |
          node scripts/generate-dev-version.mjs --debug
          VERSION=$(node scripts/generate-dev-version.mjs)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Display Version
        run: |
          echo "App Version: ${{ steps.set_version.outputs.version }}"

  frontend-tests:
    runs-on: ubuntu-latest
    needs: [build-info]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Validate Code Formatting
        run: yarn format:check
      - name: Run tests
        run: yarn test
  performance-tests:
    name: Run Desktop Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-info, frontend-tests]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/ci-setup
        with:
          matrix-os: ubuntu-latest

      - name: Build Backend (Unix)
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/seed-daemon-x86_64-unknown-linux-gnu ./backend/cmd/seed-daemon
        env:
          GOARCH: amd64
          CGO_ENABLED: 1

      - name: Set temporal version in package.json
        run: |
          node scripts/set-desktop-version.mjs
        env:
          VITE_VERSION: "${{ needs.build-info.outputs.version }}"

      - name: Build, package & make (Unix)
        run: |
          yarn desktop:make --arch=x64
        env:
          timeout-minutes: 10
          DEBUG: electron-*
          NODE_OPTIONS: --max_old_space_size=4096
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          DAEMON_NAME: "x86_64-unknown-linux-gnu"
          VITE_VERSION: "${{ needs.build-info.outputs.version }}"
          VITE_COMMIT_HASH: "${{ github.sha }}"
          VITE_DESKTOP_P2P_PORT: "59000"
          VITE_DESKTOP_HTTP_PORT: "59001"
          VITE_DESKTOP_GRPC_PORT: "59002"
          VITE_METRIC_SERVER_HTTP_PORT: "59003"
          VITE_DESKTOP_APPDATA: "Seed-dev"
          VITE_DESKTOP_HOSTNAME: "http://localhost"
          VITE_LIGHTNING_API_URL: "https://ln.testnet.seed.hyper.media"
          VITE_SEED_HOST_URL: "https://host-dev.seed.hyper.media"
          VITE_GATEWAY_URL: "https://dev.hyper.media"
          VITE_DESKTOP_SENTRY_DSN: "${{ secrets.DESKTOP_SENTRY_DSN }}"
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          SEED_P2P_TESTNET_NAME: "dev"

      - name: Run performance tests
        run: |
          # Install required system dependencies for Electron
          sudo apt-get update
          sudo apt-get install -y libasound2 libgbm-dev libgtk-3-0 libnss3 libxss1 libxtst6 xvfb

          # Create output directory
          mkdir -p electron-perf-data

          # Define scenarios from input or use all
          SCENARIOS="${{ github.event.inputs.scenarios }}"
          SCENARIOS_ARG=""
          if [ ! -z "$SCENARIOS" ]; then
            SCENARIOS_ARG="--scenarios $SCENARIOS"
          fi

          # Debug: List build directory contents
          echo "Build directory contents:"
          ls -la frontend/apps/desktop/out
          ls -la frontend/apps/desktop/out/make || true

          # Ensure correct permissions on the build
          chmod -R 755 frontend/apps/desktop/out

          # Run performance tests with all features enabled and debug output
          ELECTRON_ENABLE_LOGGING=true DEBUG=electron-*,playwright* xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" \
            bash -c "cd frontend/apps/desktop && yarn test:performance:full"
        env:
          NODE_ENV: production
          DISPLAY: ":99.0"
          DEBUG: "electron-*,playwright*"

      # Set up AWS credentials for S3 uploads
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Upload results to S3
      - name: Upload performance results to S3
        id: upload
        run: |
          # Generate timestamp folder name
          TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)

          # Set S3 prefix based on event type
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            S3_PREFIX="pr-${{ github.event.pull_request.number }}/$TIMESTAMP"
            echo "S3_PREFIX=${S3_PREFIX}" >> $GITHUB_OUTPUT
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
          else
            BRANCH="${GITHUB_REF#refs/heads/}"
            S3_PREFIX="${BRANCH}/$TIMESTAMP"
            echo "S3_PREFIX=${S3_PREFIX}" >> $GITHUB_OUTPUT
          fi

          # Upload all results
          aws s3 sync electron-perf-data s3://${{ env.S3_BUCKET_NAME }}/${S3_PREFIX}/ --acl public-read

          # Save URLs for reports
          DASHBOARD_URL="https://${{ env.S3_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${S3_PREFIX}/dashboard.html"
          BUDGET_URL="https://${{ env.S3_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${S3_PREFIX}/budget-report.html"
          BEST_PRACTICES_URL="https://${{ env.S3_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${S3_PREFIX}/best-practices-report.html"

          echo "dashboard_url=${DASHBOARD_URL}" >> $GITHUB_OUTPUT
          echo "budget_url=${BUDGET_URL}" >> $GITHUB_OUTPUT
          echo "best_practices_url=${BEST_PRACTICES_URL}" >> $GITHUB_OUTPUT

      # For PRs, compare with baseline
      - name: Compare with baseline performance metrics
        id: compare
        if: github.event_name == 'pull_request'
        run: |
          # Download latest main branch metrics for comparison
          mkdir -p baseline-metrics

          # Get latest main branch metrics
          aws s3 ls s3://${{ env.S3_BUCKET_NAME }}/main/ --recursive | sort -r | head -n 1 | awk '{print $4}' | xargs -I{} aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/{} baseline-metrics/

          # Generate comparison report
          cd frontend/apps/desktop && yarn test:performance-compare \
            --baseline baseline-metrics \
            --current electron-perf-data \
            --output electron-perf-data/comparison-report.html \
            --threshold 3

          # Upload comparison report
          aws s3 cp electron-perf-data/comparison-report.html s3://${{ env.S3_BUCKET_NAME }}/${S3_PREFIX}/comparison-report.html --acl public-read

          # Save comparison URL
          COMPARISON_URL="https://${{ env.S3_BUCKET_NAME }}.s3.${{ env.AWS_REGION }}.amazonaws.com/${S3_PREFIX}/comparison-report.html"
          echo "comparison_url=${COMPARISON_URL}" >> $GITHUB_OUTPUT

      # Create summary with links to reports
      - name: Create performance test summary
        run: |
          echo "## Desktop Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Performance metrics have been collected for the desktop application." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports" >> $GITHUB_STEP_SUMMARY
          echo "- [Performance Dashboard](${{ steps.upload.outputs.dashboard_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Performance Budget Report](${{ steps.upload.outputs.budget_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Best Practices Report](${{ steps.upload.outputs.best_practices_url }})" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "- [Comparison with baseline](${{ steps.compare.outputs.comparison_url }})" >> $GITHUB_STEP_SUMMARY
            
            # Add PR comment with links
            if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
              PR_COMMENT="## Desktop Performance Test Results\n\nPerformance metrics have been collected for this PR.\n\n### Reports\n- [Performance Dashboard](${{ steps.upload.outputs.dashboard_url }})\n- [Performance Budget Report](${{ steps.upload.outputs.budget_url }})\n- [Best Practices Report](${{ steps.upload.outputs.best_practices_url }})\n- [Comparison with baseline](${{ steps.compare.outputs.comparison_url }})\n"
              
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{\"body\": \"$PR_COMMENT\"}" \
                "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.upload.outputs.pr_number }}/comments"
            fi
          fi

      # Upload results as artifacts
      - name: Upload performance results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-electron-perf-data
          path: electron-perf-data
          retention-days: 14

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Copy artifacts to expected location
        run: |
          # Create destination directory if it doesn't exist
          mkdir -p frontend/apps/desktop/out/make

          # Debug: List all downloaded artifacts
          echo "Downloaded artifacts:"
          find artifacts -type f | head -n 20

          # Copy the artifacts into the make directory maintaining structure
          # Each artifact directory (artifacts-*) should go into the make directory
          # First try to find platform-specific directories like darwin-x64, win32-x64, etc.
          for platform_dir in $(find artifacts -type d -name "*-x64" -o -name "*-arm64" -o -name "*darwin*" -o -name "*win32*" -o -name "*linux*"); do
            echo "Found platform directory: $platform_dir"
            # Extract just the platform part (e.g., darwin-x64)
            platform_name=$(basename "$platform_dir")
            # Create directory if needed
            mkdir -p frontend/apps/desktop/out/make/$platform_name
            # Copy contents
            cp -r $platform_dir/* frontend/apps/desktop/out/make/$platform_name/
          done

          # If no platform directories found, try a simpler approach
          if [ ! "$(ls -A frontend/apps/desktop/out/make/)" ]; then
            echo "No platform directories found, using simpler approach"
            for artifact_dir in artifacts/artifacts-*; do
              if [ -d "$artifact_dir" ]; then
                echo "Copying from $artifact_dir"
                cp -r $artifact_dir/* frontend/apps/desktop/out/make/
              fi
            done
          fi

          # List files to verify
          echo "Contents of frontend/apps/desktop/out/make:"
          find frontend/apps/desktop/out -type d | sort
